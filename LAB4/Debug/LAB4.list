
LAB4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d98  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002ea4  08002ea4  00012ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ec8  08002ec8  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08002ec8  08002ec8  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ec8  08002ec8  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ec8  08002ec8  00012ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ecc  08002ecc  00012ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08002ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  20000094  08002f64  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  08002f64  00020484  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b0ac  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fd4  00000000  00000000  0002b169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  0002d140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f0  00000000  00000000  0002dc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bc0  00000000  00000000  0002e670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed6e  00000000  00000000  00046230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082894  00000000  00000000  00054f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d7832  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ad4  00000000  00000000  000d7888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e8c 	.word	0x08002e8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08002e8c 	.word	0x08002e8c

0800014c <IsButtonPress>:
int TimerForKeyPress[5] = {300,300,300,300,300};

int button_flag[5];
int button_LongPress_flag[5];

int IsButtonPress(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <IsButtonPress+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <IsButtonPress+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <IsButtonPress+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <IsButtonPress+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000dc 	.word	0x200000dc

08000180 <subKeyProcess>:


void subKeyProcess(int index) {
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	200000dc 	.word	0x200000dc

080001a0 <getIndex>:

int getIndex(int index) {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	switch(index){
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	2b02      	cmp	r3, #2
 80001ac:	d015      	beq.n	80001da <getIndex+0x3a>
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	2b02      	cmp	r3, #2
 80001b2:	dc18      	bgt.n	80001e6 <getIndex+0x46>
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d003      	beq.n	80001c2 <getIndex+0x22>
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	2b01      	cmp	r3, #1
 80001be:	d006      	beq.n	80001ce <getIndex+0x2e>
			break;
		case 2:
			return HAL_GPIO_ReadPin(GPIOA, PA2_Pin);
			break;
		default:
			break;
 80001c0:	e011      	b.n	80001e6 <getIndex+0x46>
			return HAL_GPIO_ReadPin(GPIOA, PA0_Pin);
 80001c2:	2101      	movs	r1, #1
 80001c4:	480b      	ldr	r0, [pc, #44]	; (80001f4 <getIndex+0x54>)
 80001c6:	f001 fe35 	bl	8001e34 <HAL_GPIO_ReadPin>
 80001ca:	4603      	mov	r3, r0
 80001cc:	e00d      	b.n	80001ea <getIndex+0x4a>
			return HAL_GPIO_ReadPin(GPIOA, PA1_Pin);
 80001ce:	2102      	movs	r1, #2
 80001d0:	4808      	ldr	r0, [pc, #32]	; (80001f4 <getIndex+0x54>)
 80001d2:	f001 fe2f 	bl	8001e34 <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	e007      	b.n	80001ea <getIndex+0x4a>
			return HAL_GPIO_ReadPin(GPIOA, PA2_Pin);
 80001da:	2104      	movs	r1, #4
 80001dc:	4805      	ldr	r0, [pc, #20]	; (80001f4 <getIndex+0x54>)
 80001de:	f001 fe29 	bl	8001e34 <HAL_GPIO_ReadPin>
 80001e2:	4603      	mov	r3, r0
 80001e4:	e001      	b.n	80001ea <getIndex+0x4a>
			break;
 80001e6:	bf00      	nop
	}
	return 0;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	3708      	adds	r7, #8
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	40010800 	.word	0x40010800

080001f8 <getKeyInput>:

void getKeyInput() {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 5; i++) {
 80001fe:	2300      	movs	r3, #0
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	e069      	b.n	80002d8 <getKeyInput+0xe0>
		KeyReg0[i] = KeyReg1[i];
 8000204:	4a38      	ldr	r2, [pc, #224]	; (80002e8 <getKeyInput+0xf0>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	4937      	ldr	r1, [pc, #220]	; (80002ec <getKeyInput+0xf4>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000214:	4a36      	ldr	r2, [pc, #216]	; (80002f0 <getKeyInput+0xf8>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021c:	4932      	ldr	r1, [pc, #200]	; (80002e8 <getKeyInput+0xf0>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		KeyReg2[i] = getIndex(i) ;
 8000224:	6878      	ldr	r0, [r7, #4]
 8000226:	f7ff ffbb 	bl	80001a0 <getIndex>
 800022a:	4602      	mov	r2, r0
 800022c:	4930      	ldr	r1, [pc, #192]	; (80002f0 <getKeyInput+0xf8>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 8000234:	4a2d      	ldr	r2, [pc, #180]	; (80002ec <getKeyInput+0xf4>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023c:	492a      	ldr	r1, [pc, #168]	; (80002e8 <getKeyInput+0xf0>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000244:	429a      	cmp	r2, r3
 8000246:	d144      	bne.n	80002d2 <getKeyInput+0xda>
 8000248:	4a27      	ldr	r2, [pc, #156]	; (80002e8 <getKeyInput+0xf0>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000250:	4927      	ldr	r1, [pc, #156]	; (80002f0 <getKeyInput+0xf8>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000258:	429a      	cmp	r2, r3
 800025a:	d13a      	bne.n	80002d2 <getKeyInput+0xda>
			if (KeyReg3[i] != KeyReg2[i]) {
 800025c:	4a25      	ldr	r2, [pc, #148]	; (80002f4 <getKeyInput+0xfc>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000264:	4922      	ldr	r1, [pc, #136]	; (80002f0 <getKeyInput+0xf8>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800026c:	429a      	cmp	r2, r3
 800026e:	d01c      	beq.n	80002aa <getKeyInput+0xb2>
				KeyReg3[i] = KeyReg2[i];
 8000270:	4a1f      	ldr	r2, [pc, #124]	; (80002f0 <getKeyInput+0xf8>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000278:	491e      	ldr	r1, [pc, #120]	; (80002f4 <getKeyInput+0xfc>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESS_STATE) {
 8000280:	4a1b      	ldr	r2, [pc, #108]	; (80002f0 <getKeyInput+0xf8>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d122      	bne.n	80002d2 <getKeyInput+0xda>
					//todo
					subKeyProcess(i);
 800028c:	6878      	ldr	r0, [r7, #4]
 800028e:	f7ff ff77 	bl	8000180 <subKeyProcess>
					HAL_GPIO_TogglePin(GPIOB, PB14_Pin);
 8000292:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000296:	4818      	ldr	r0, [pc, #96]	; (80002f8 <getKeyInput+0x100>)
 8000298:	f001 fdfb 	bl	8001e92 <HAL_GPIO_TogglePin>
					TimerForKeyPress[i] = 300;
 800029c:	4a17      	ldr	r2, [pc, #92]	; (80002fc <getKeyInput+0x104>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80002a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002a8:	e013      	b.n	80002d2 <getKeyInput+0xda>

				}
			} else {
				TimerForKeyPress[i]--;
 80002aa:	4a14      	ldr	r2, [pc, #80]	; (80002fc <getKeyInput+0x104>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b2:	1e5a      	subs	r2, r3, #1
 80002b4:	4911      	ldr	r1, [pc, #68]	; (80002fc <getKeyInput+0x104>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimerForKeyPress[i] == 0) {
 80002bc:	4a0f      	ldr	r2, [pc, #60]	; (80002fc <getKeyInput+0x104>)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d104      	bne.n	80002d2 <getKeyInput+0xda>
					//todo
					KeyReg3[i] = NORMAL_STATE;
 80002c8:	4a0a      	ldr	r2, [pc, #40]	; (80002f4 <getKeyInput+0xfc>)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2101      	movs	r1, #1
 80002ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 5; i++) {
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	3301      	adds	r3, #1
 80002d6:	607b      	str	r3, [r7, #4]
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2b04      	cmp	r3, #4
 80002dc:	dd92      	ble.n	8000204 <getKeyInput+0xc>
				}
			}
		}
	}
}
 80002de:	bf00      	nop
 80002e0:	bf00      	nop
 80002e2:	3708      	adds	r7, #8
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	20000014 	.word	0x20000014
 80002ec:	20000000 	.word	0x20000000
 80002f0:	20000028 	.word	0x20000028
 80002f4:	2000003c 	.word	0x2000003c
 80002f8:	40010c00 	.word	0x40010c00
 80002fc:	20000050 	.word	0x20000050

08000300 <update_switch>:
int buffer_indexA[2];
int buffer_indexB[2];
int switch_7seg=0;


void update_switch(){
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
			switch_7seg++;
 8000304:	4b07      	ldr	r3, [pc, #28]	; (8000324 <update_switch+0x24>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	3301      	adds	r3, #1
 800030a:	4a06      	ldr	r2, [pc, #24]	; (8000324 <update_switch+0x24>)
 800030c:	6013      	str	r3, [r2, #0]
			if(switch_7seg >1) switch_7seg = 0;
 800030e:	4b05      	ldr	r3, [pc, #20]	; (8000324 <update_switch+0x24>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	2b01      	cmp	r3, #1
 8000314:	dd02      	ble.n	800031c <update_switch+0x1c>
 8000316:	4b03      	ldr	r3, [pc, #12]	; (8000324 <update_switch+0x24>)
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]

}
 800031c:	bf00      	nop
 800031e:	46bd      	mov	sp, r7
 8000320:	bc80      	pop	{r7}
 8000322:	4770      	bx	lr
 8000324:	200000b0 	.word	0x200000b0

08000328 <clearA>:

void clearA(){
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, PB0_Pin, SET);
 800032c:	2201      	movs	r2, #1
 800032e:	2101      	movs	r1, #1
 8000330:	4811      	ldr	r0, [pc, #68]	; (8000378 <clearA+0x50>)
 8000332:	f001 fd96 	bl	8001e62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, PB1_Pin, SET);
 8000336:	2201      	movs	r2, #1
 8000338:	2102      	movs	r1, #2
 800033a:	480f      	ldr	r0, [pc, #60]	; (8000378 <clearA+0x50>)
 800033c:	f001 fd91 	bl	8001e62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, PB2_Pin, SET);
 8000340:	2201      	movs	r2, #1
 8000342:	2104      	movs	r1, #4
 8000344:	480c      	ldr	r0, [pc, #48]	; (8000378 <clearA+0x50>)
 8000346:	f001 fd8c 	bl	8001e62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, PB3_Pin, SET);
 800034a:	2201      	movs	r2, #1
 800034c:	2108      	movs	r1, #8
 800034e:	480a      	ldr	r0, [pc, #40]	; (8000378 <clearA+0x50>)
 8000350:	f001 fd87 	bl	8001e62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, PB4_Pin, SET);
 8000354:	2201      	movs	r2, #1
 8000356:	2110      	movs	r1, #16
 8000358:	4807      	ldr	r0, [pc, #28]	; (8000378 <clearA+0x50>)
 800035a:	f001 fd82 	bl	8001e62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, PB5_Pin, SET);
 800035e:	2201      	movs	r2, #1
 8000360:	2120      	movs	r1, #32
 8000362:	4805      	ldr	r0, [pc, #20]	; (8000378 <clearA+0x50>)
 8000364:	f001 fd7d 	bl	8001e62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, PB6_Pin, SET);
 8000368:	2201      	movs	r2, #1
 800036a:	2140      	movs	r1, #64	; 0x40
 800036c:	4802      	ldr	r0, [pc, #8]	; (8000378 <clearA+0x50>)
 800036e:	f001 fd78 	bl	8001e62 <HAL_GPIO_WritePin>

}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40010c00 	.word	0x40010c00

0800037c <clearB>:

void clearB(){
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, PB13_Pin, SET);
 8000380:	2201      	movs	r2, #1
 8000382:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000386:	4808      	ldr	r0, [pc, #32]	; (80003a8 <clearB+0x2c>)
 8000388:	f001 fd6b 	bl	8001e62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, PB7_Pin | PB8_Pin | PB9_Pin, SET);
 800038c:	2201      	movs	r2, #1
 800038e:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000392:	4805      	ldr	r0, [pc, #20]	; (80003a8 <clearB+0x2c>)
 8000394:	f001 fd65 	bl	8001e62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, PB10_Pin | PB11_Pin | PB12_Pin, SET);
 8000398:	2201      	movs	r2, #1
 800039a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800039e:	4802      	ldr	r0, [pc, #8]	; (80003a8 <clearB+0x2c>)
 80003a0:	f001 fd5f 	bl	8001e62 <HAL_GPIO_WritePin>
}
 80003a4:	bf00      	nop
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	40010c00 	.word	0x40010c00

080003ac <display7SEGA>:

void display7SEGA(int index) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	2b09      	cmp	r3, #9
 80003b8:	f200 808f 	bhi.w	80004da <display7SEGA+0x12e>
 80003bc:	a201      	add	r2, pc, #4	; (adr r2, 80003c4 <display7SEGA+0x18>)
 80003be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c2:	bf00      	nop
 80003c4:	080003ed 	.word	0x080003ed
 80003c8:	0800042b 	.word	0x0800042b
 80003cc:	08000437 	.word	0x08000437
 80003d0:	08000457 	.word	0x08000457
 80003d4:	08000477 	.word	0x08000477
 80003d8:	0800048d 	.word	0x0800048d
 80003dc:	080004a3 	.word	0x080004a3
 80003e0:	080004b9 	.word	0x080004b9
 80003e4:	080004db 	.word	0x080004db
 80003e8:	080004c5 	.word	0x080004c5
	switch (index) {
	case 0:
		HAL_GPIO_WritePin(GPIOB, PB0_Pin, RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2101      	movs	r1, #1
 80003f0:	483c      	ldr	r0, [pc, #240]	; (80004e4 <display7SEGA+0x138>)
 80003f2:	f001 fd36 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB1_Pin, RESET);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2102      	movs	r1, #2
 80003fa:	483a      	ldr	r0, [pc, #232]	; (80004e4 <display7SEGA+0x138>)
 80003fc:	f001 fd31 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB2_Pin, RESET);
 8000400:	2200      	movs	r2, #0
 8000402:	2104      	movs	r1, #4
 8000404:	4837      	ldr	r0, [pc, #220]	; (80004e4 <display7SEGA+0x138>)
 8000406:	f001 fd2c 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB3_Pin, RESET);
 800040a:	2200      	movs	r2, #0
 800040c:	2108      	movs	r1, #8
 800040e:	4835      	ldr	r0, [pc, #212]	; (80004e4 <display7SEGA+0x138>)
 8000410:	f001 fd27 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB4_Pin, RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2110      	movs	r1, #16
 8000418:	4832      	ldr	r0, [pc, #200]	; (80004e4 <display7SEGA+0x138>)
 800041a:	f001 fd22 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB5_Pin, RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	2120      	movs	r1, #32
 8000422:	4830      	ldr	r0, [pc, #192]	; (80004e4 <display7SEGA+0x138>)
 8000424:	f001 fd1d 	bl	8001e62 <HAL_GPIO_WritePin>
		break;
 8000428:	e058      	b.n	80004dc <display7SEGA+0x130>
	case 1:
		HAL_GPIO_WritePin(GPIOB, PB1_Pin | PB2_Pin, RESET);
 800042a:	2200      	movs	r2, #0
 800042c:	2106      	movs	r1, #6
 800042e:	482d      	ldr	r0, [pc, #180]	; (80004e4 <display7SEGA+0x138>)
 8000430:	f001 fd17 	bl	8001e62 <HAL_GPIO_WritePin>
		break;
 8000434:	e052      	b.n	80004dc <display7SEGA+0x130>
	case 2:
		HAL_GPIO_WritePin(GPIOB, PB3_Pin | PB4_Pin, RESET);
 8000436:	2200      	movs	r2, #0
 8000438:	2118      	movs	r1, #24
 800043a:	482a      	ldr	r0, [pc, #168]	; (80004e4 <display7SEGA+0x138>)
 800043c:	f001 fd11 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB0_Pin | PB1_Pin, RESET);
 8000440:	2200      	movs	r2, #0
 8000442:	2103      	movs	r1, #3
 8000444:	4827      	ldr	r0, [pc, #156]	; (80004e4 <display7SEGA+0x138>)
 8000446:	f001 fd0c 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB6_Pin , RESET);
 800044a:	2200      	movs	r2, #0
 800044c:	2140      	movs	r1, #64	; 0x40
 800044e:	4825      	ldr	r0, [pc, #148]	; (80004e4 <display7SEGA+0x138>)
 8000450:	f001 fd07 	bl	8001e62 <HAL_GPIO_WritePin>
		break;
 8000454:	e042      	b.n	80004dc <display7SEGA+0x130>
	case 3:
		HAL_GPIO_WritePin(GPIOB, PB3_Pin | PB6_Pin, RESET);
 8000456:	2200      	movs	r2, #0
 8000458:	2148      	movs	r1, #72	; 0x48
 800045a:	4822      	ldr	r0, [pc, #136]	; (80004e4 <display7SEGA+0x138>)
 800045c:	f001 fd01 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB0_Pin | PB1_Pin, RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	2103      	movs	r1, #3
 8000464:	481f      	ldr	r0, [pc, #124]	; (80004e4 <display7SEGA+0x138>)
 8000466:	f001 fcfc 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB2_Pin, RESET);
 800046a:	2200      	movs	r2, #0
 800046c:	2104      	movs	r1, #4
 800046e:	481d      	ldr	r0, [pc, #116]	; (80004e4 <display7SEGA+0x138>)
 8000470:	f001 fcf7 	bl	8001e62 <HAL_GPIO_WritePin>
		break;
 8000474:	e032      	b.n	80004dc <display7SEGA+0x130>
	case 4:
		HAL_GPIO_WritePin(GPIOB, PB1_Pin | PB2_Pin, RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	2106      	movs	r1, #6
 800047a:	481a      	ldr	r0, [pc, #104]	; (80004e4 <display7SEGA+0x138>)
 800047c:	f001 fcf1 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB6_Pin | PB5_Pin, RESET);
 8000480:	2200      	movs	r2, #0
 8000482:	2160      	movs	r1, #96	; 0x60
 8000484:	4817      	ldr	r0, [pc, #92]	; (80004e4 <display7SEGA+0x138>)
 8000486:	f001 fcec 	bl	8001e62 <HAL_GPIO_WritePin>
		break;
 800048a:	e027      	b.n	80004dc <display7SEGA+0x130>
	case 5:
		HAL_GPIO_WritePin(GPIOB, PB0_Pin | PB2_Pin, RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	2105      	movs	r1, #5
 8000490:	4814      	ldr	r0, [pc, #80]	; (80004e4 <display7SEGA+0x138>)
 8000492:	f001 fce6 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB3_Pin | PB6_Pin | PB5_Pin, RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	2168      	movs	r1, #104	; 0x68
 800049a:	4812      	ldr	r0, [pc, #72]	; (80004e4 <display7SEGA+0x138>)
 800049c:	f001 fce1 	bl	8001e62 <HAL_GPIO_WritePin>
		break;
 80004a0:	e01c      	b.n	80004dc <display7SEGA+0x130>
	case 6:
		HAL_GPIO_WritePin(GPIOB, PB0_Pin | PB2_Pin | PB4_Pin, RESET);
 80004a2:	2200      	movs	r2, #0
 80004a4:	2115      	movs	r1, #21
 80004a6:	480f      	ldr	r0, [pc, #60]	; (80004e4 <display7SEGA+0x138>)
 80004a8:	f001 fcdb 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB3_Pin | PB6_Pin | PB5_Pin, RESET);
 80004ac:	2200      	movs	r2, #0
 80004ae:	2168      	movs	r1, #104	; 0x68
 80004b0:	480c      	ldr	r0, [pc, #48]	; (80004e4 <display7SEGA+0x138>)
 80004b2:	f001 fcd6 	bl	8001e62 <HAL_GPIO_WritePin>
		break;
 80004b6:	e011      	b.n	80004dc <display7SEGA+0x130>
	case 7:
		HAL_GPIO_WritePin(GPIOB, PB0_Pin | PB1_Pin | PB2_Pin, RESET);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2107      	movs	r1, #7
 80004bc:	4809      	ldr	r0, [pc, #36]	; (80004e4 <display7SEGA+0x138>)
 80004be:	f001 fcd0 	bl	8001e62 <HAL_GPIO_WritePin>
		break;
 80004c2:	e00b      	b.n	80004dc <display7SEGA+0x130>
	case 8:

		break;
	case 9:
		HAL_GPIO_WritePin(GPIOB, PB0_Pin | PB1_Pin | PB2_Pin, RESET);
 80004c4:	2200      	movs	r2, #0
 80004c6:	2107      	movs	r1, #7
 80004c8:	4806      	ldr	r0, [pc, #24]	; (80004e4 <display7SEGA+0x138>)
 80004ca:	f001 fcca 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB3_Pin | PB6_Pin | PB5_Pin, RESET);
 80004ce:	2200      	movs	r2, #0
 80004d0:	2168      	movs	r1, #104	; 0x68
 80004d2:	4804      	ldr	r0, [pc, #16]	; (80004e4 <display7SEGA+0x138>)
 80004d4:	f001 fcc5 	bl	8001e62 <HAL_GPIO_WritePin>
		break;
 80004d8:	e000      	b.n	80004dc <display7SEGA+0x130>
	default:
		break;
 80004da:	bf00      	nop
	}

}
 80004dc:	bf00      	nop
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40010c00 	.word	0x40010c00

080004e8 <display7SEGB>:

void display7SEGB(int index) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2b09      	cmp	r3, #9
 80004f4:	d87f      	bhi.n	80005f6 <display7SEGB+0x10e>
 80004f6:	a201      	add	r2, pc, #4	; (adr r2, 80004fc <display7SEGB+0x14>)
 80004f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004fc:	08000525 	.word	0x08000525
 8000500:	0800053f 	.word	0x0800053f
 8000504:	0800054d 	.word	0x0800054d
 8000508:	08000567 	.word	0x08000567
 800050c:	08000581 	.word	0x08000581
 8000510:	0800059b 	.word	0x0800059b
 8000514:	080005b5 	.word	0x080005b5
 8000518:	080005cf 	.word	0x080005cf
 800051c:	080005f7 	.word	0x080005f7
 8000520:	080005dd 	.word	0x080005dd
	switch (index) {
	case 0:
		HAL_GPIO_WritePin(GPIOB, PB7_Pin | PB8_Pin | PB9_Pin, RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	f44f 7160 	mov.w	r1, #896	; 0x380
 800052a:	4835      	ldr	r0, [pc, #212]	; (8000600 <display7SEGB+0x118>)
 800052c:	f001 fc99 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB10_Pin | PB11_Pin | PB12_Pin, RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000536:	4832      	ldr	r0, [pc, #200]	; (8000600 <display7SEGB+0x118>)
 8000538:	f001 fc93 	bl	8001e62 <HAL_GPIO_WritePin>
		break;
 800053c:	e05c      	b.n	80005f8 <display7SEGB+0x110>
	case 1:
		HAL_GPIO_WritePin(GPIOB, PB8_Pin | PB9_Pin, RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000544:	482e      	ldr	r0, [pc, #184]	; (8000600 <display7SEGB+0x118>)
 8000546:	f001 fc8c 	bl	8001e62 <HAL_GPIO_WritePin>
		break;
 800054a:	e055      	b.n	80005f8 <display7SEGB+0x110>
	case 2:
		HAL_GPIO_WritePin(GPIOB, PB7_Pin | PB8_Pin | PB13_Pin, RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 5106 	mov.w	r1, #8576	; 0x2180
 8000552:	482b      	ldr	r0, [pc, #172]	; (8000600 <display7SEGB+0x118>)
 8000554:	f001 fc85 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB10_Pin | PB11_Pin, RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800055e:	4828      	ldr	r0, [pc, #160]	; (8000600 <display7SEGB+0x118>)
 8000560:	f001 fc7f 	bl	8001e62 <HAL_GPIO_WritePin>
		break;
 8000564:	e048      	b.n	80005f8 <display7SEGB+0x110>
	case 3:
		HAL_GPIO_WritePin(GPIOB, PB7_Pin | PB8_Pin | PB9_Pin, RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 7160 	mov.w	r1, #896	; 0x380
 800056c:	4824      	ldr	r0, [pc, #144]	; (8000600 <display7SEGB+0x118>)
 800056e:	f001 fc78 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB10_Pin | PB13_Pin, RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8000578:	4821      	ldr	r0, [pc, #132]	; (8000600 <display7SEGB+0x118>)
 800057a:	f001 fc72 	bl	8001e62 <HAL_GPIO_WritePin>
		break;
 800057e:	e03b      	b.n	80005f8 <display7SEGB+0x110>
	case 4:
		HAL_GPIO_WritePin(GPIOB, PB8_Pin | PB9_Pin, RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000586:	481e      	ldr	r0, [pc, #120]	; (8000600 <display7SEGB+0x118>)
 8000588:	f001 fc6b 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB13_Pin | PB12_Pin, RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000592:	481b      	ldr	r0, [pc, #108]	; (8000600 <display7SEGB+0x118>)
 8000594:	f001 fc65 	bl	8001e62 <HAL_GPIO_WritePin>
		break;
 8000598:	e02e      	b.n	80005f8 <display7SEGB+0x110>
	case 5:
		HAL_GPIO_WritePin(GPIOB, PB7_Pin | PB9_Pin, RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 7120 	mov.w	r1, #640	; 0x280
 80005a0:	4817      	ldr	r0, [pc, #92]	; (8000600 <display7SEGB+0x118>)
 80005a2:	f001 fc5e 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB10_Pin | PB13_Pin | PB12_Pin, RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 5150 	mov.w	r1, #13312	; 0x3400
 80005ac:	4814      	ldr	r0, [pc, #80]	; (8000600 <display7SEGB+0x118>)
 80005ae:	f001 fc58 	bl	8001e62 <HAL_GPIO_WritePin>
		break;
 80005b2:	e021      	b.n	80005f8 <display7SEGB+0x110>
	case 6:
		HAL_GPIO_WritePin(GPIOB, PB7_Pin | PB9_Pin | PB11_Pin, RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	f44f 6128 	mov.w	r1, #2688	; 0xa80
 80005ba:	4811      	ldr	r0, [pc, #68]	; (8000600 <display7SEGB+0x118>)
 80005bc:	f001 fc51 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB10_Pin | PB13_Pin | PB12_Pin, RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 5150 	mov.w	r1, #13312	; 0x3400
 80005c6:	480e      	ldr	r0, [pc, #56]	; (8000600 <display7SEGB+0x118>)
 80005c8:	f001 fc4b 	bl	8001e62 <HAL_GPIO_WritePin>
		break;
 80005cc:	e014      	b.n	80005f8 <display7SEGB+0x110>
	case 7:
		HAL_GPIO_WritePin(GPIOB, PB7_Pin | PB8_Pin | PB9_Pin, RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 7160 	mov.w	r1, #896	; 0x380
 80005d4:	480a      	ldr	r0, [pc, #40]	; (8000600 <display7SEGB+0x118>)
 80005d6:	f001 fc44 	bl	8001e62 <HAL_GPIO_WritePin>
		break;
 80005da:	e00d      	b.n	80005f8 <display7SEGB+0x110>
	case 8:

		break;
	case 9:
		HAL_GPIO_WritePin(GPIOB, PB7_Pin | PB8_Pin | PB9_Pin, RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 7160 	mov.w	r1, #896	; 0x380
 80005e2:	4807      	ldr	r0, [pc, #28]	; (8000600 <display7SEGB+0x118>)
 80005e4:	f001 fc3d 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB10_Pin | PB13_Pin | PB12_Pin, RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 5150 	mov.w	r1, #13312	; 0x3400
 80005ee:	4804      	ldr	r0, [pc, #16]	; (8000600 <display7SEGB+0x118>)
 80005f0:	f001 fc37 	bl	8001e62 <HAL_GPIO_WritePin>
		break;
 80005f4:	e000      	b.n	80005f8 <display7SEGB+0x110>
	default:
		break;
 80005f6:	bf00      	nop
	}

}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40010c00 	.word	0x40010c00

08000604 <update_indexA>:

void update_indexA(int index) {
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	if (index >= 10) {
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2b09      	cmp	r3, #9
 8000610:	dd17      	ble.n	8000642 <update_indexA+0x3e>
		buffer_indexA[0] = index % 10;
 8000612:	6879      	ldr	r1, [r7, #4]
 8000614:	4b10      	ldr	r3, [pc, #64]	; (8000658 <update_indexA+0x54>)
 8000616:	fb83 2301 	smull	r2, r3, r3, r1
 800061a:	109a      	asrs	r2, r3, #2
 800061c:	17cb      	asrs	r3, r1, #31
 800061e:	1ad2      	subs	r2, r2, r3
 8000620:	4613      	mov	r3, r2
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	4413      	add	r3, r2
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	1aca      	subs	r2, r1, r3
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <update_indexA+0x58>)
 800062c:	601a      	str	r2, [r3, #0]
		buffer_indexA[1] = index / 10;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4a09      	ldr	r2, [pc, #36]	; (8000658 <update_indexA+0x54>)
 8000632:	fb82 1203 	smull	r1, r2, r2, r3
 8000636:	1092      	asrs	r2, r2, #2
 8000638:	17db      	asrs	r3, r3, #31
 800063a:	1ad3      	subs	r3, r2, r3
 800063c:	4a07      	ldr	r2, [pc, #28]	; (800065c <update_indexA+0x58>)
 800063e:	6053      	str	r3, [r2, #4]
	} else {
		buffer_indexA[0] = index;
		buffer_indexA[1] = 0;
	}
}
 8000640:	e005      	b.n	800064e <update_indexA+0x4a>
		buffer_indexA[0] = index;
 8000642:	4a06      	ldr	r2, [pc, #24]	; (800065c <update_indexA+0x58>)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	6013      	str	r3, [r2, #0]
		buffer_indexA[1] = 0;
 8000648:	4b04      	ldr	r3, [pc, #16]	; (800065c <update_indexA+0x58>)
 800064a:	2200      	movs	r2, #0
 800064c:	605a      	str	r2, [r3, #4]
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr
 8000658:	66666667 	.word	0x66666667
 800065c:	20000110 	.word	0x20000110

08000660 <update_indexB>:

void update_indexB(int index) {
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	if (index >= 10) {
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b09      	cmp	r3, #9
 800066c:	dd17      	ble.n	800069e <update_indexB+0x3e>
		buffer_indexB[0] = index % 10;
 800066e:	6879      	ldr	r1, [r7, #4]
 8000670:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <update_indexB+0x54>)
 8000672:	fb83 2301 	smull	r2, r3, r3, r1
 8000676:	109a      	asrs	r2, r3, #2
 8000678:	17cb      	asrs	r3, r1, #31
 800067a:	1ad2      	subs	r2, r2, r3
 800067c:	4613      	mov	r3, r2
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	4413      	add	r3, r2
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	1aca      	subs	r2, r1, r3
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <update_indexB+0x58>)
 8000688:	601a      	str	r2, [r3, #0]
		buffer_indexB[1] = index / 10;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4a09      	ldr	r2, [pc, #36]	; (80006b4 <update_indexB+0x54>)
 800068e:	fb82 1203 	smull	r1, r2, r2, r3
 8000692:	1092      	asrs	r2, r2, #2
 8000694:	17db      	asrs	r3, r3, #31
 8000696:	1ad3      	subs	r3, r2, r3
 8000698:	4a07      	ldr	r2, [pc, #28]	; (80006b8 <update_indexB+0x58>)
 800069a:	6053      	str	r3, [r2, #4]
	} else {
		buffer_indexB[0] = index;
		buffer_indexB[1] = 0;
	}
}
 800069c:	e005      	b.n	80006aa <update_indexB+0x4a>
		buffer_indexB[0] = index;
 800069e:	4a06      	ldr	r2, [pc, #24]	; (80006b8 <update_indexB+0x58>)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	6013      	str	r3, [r2, #0]
		buffer_indexB[1] = 0;
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <update_indexB+0x58>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	605a      	str	r2, [r3, #4]
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	66666667 	.word	0x66666667
 80006b8:	20000108 	.word	0x20000108

080006bc <update_7seg_A>:


void update_7seg_A() {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	clearA();
 80006c0:	f7ff fe32 	bl	8000328 <clearA>
	switch (switch_7seg) {
 80006c4:	4b16      	ldr	r3, [pc, #88]	; (8000720 <update_7seg_A+0x64>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d002      	beq.n	80006d2 <update_7seg_A+0x16>
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d012      	beq.n	80006f6 <update_7seg_A+0x3a>
		display7SEGA(buffer_indexA[0]);
		HAL_GPIO_WritePin(GPIOA, PA11_Pin, SET);
		HAL_GPIO_WritePin(GPIOA, PA12_Pin, RESET);
		break;
	default:
		break;
 80006d0:	e023      	b.n	800071a <update_7seg_A+0x5e>
		display7SEGA(buffer_indexA[1]);
 80006d2:	4b14      	ldr	r3, [pc, #80]	; (8000724 <update_7seg_A+0x68>)
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff fe68 	bl	80003ac <display7SEGA>
		HAL_GPIO_WritePin(GPIOA, PA11_Pin, RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006e2:	4811      	ldr	r0, [pc, #68]	; (8000728 <update_7seg_A+0x6c>)
 80006e4:	f001 fbbd 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA12_Pin, SET);
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ee:	480e      	ldr	r0, [pc, #56]	; (8000728 <update_7seg_A+0x6c>)
 80006f0:	f001 fbb7 	bl	8001e62 <HAL_GPIO_WritePin>
		break;
 80006f4:	e011      	b.n	800071a <update_7seg_A+0x5e>
		display7SEGA(buffer_indexA[0]);
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <update_7seg_A+0x68>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fe56 	bl	80003ac <display7SEGA>
		HAL_GPIO_WritePin(GPIOA, PA11_Pin, SET);
 8000700:	2201      	movs	r2, #1
 8000702:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000706:	4808      	ldr	r0, [pc, #32]	; (8000728 <update_7seg_A+0x6c>)
 8000708:	f001 fbab 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA12_Pin, RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <update_7seg_A+0x6c>)
 8000714:	f001 fba5 	bl	8001e62 <HAL_GPIO_WritePin>
		break;
 8000718:	bf00      	nop
	}
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200000b0 	.word	0x200000b0
 8000724:	20000110 	.word	0x20000110
 8000728:	40010800 	.word	0x40010800

0800072c <update_7seg_B>:

void update_7seg_B() {
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	clearB();
 8000730:	f7ff fe24 	bl	800037c <clearB>
	switch (switch_7seg) {
 8000734:	4b16      	ldr	r3, [pc, #88]	; (8000790 <update_7seg_B+0x64>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d002      	beq.n	8000742 <update_7seg_B+0x16>
 800073c:	2b01      	cmp	r3, #1
 800073e:	d012      	beq.n	8000766 <update_7seg_B+0x3a>
		display7SEGB(buffer_indexB[0]);
		HAL_GPIO_WritePin(GPIOA, PA13_Pin, SET);
		HAL_GPIO_WritePin(GPIOA, PA14_Pin, RESET);
		break;
	default:
		break;
 8000740:	e023      	b.n	800078a <update_7seg_B+0x5e>
		display7SEGB(buffer_indexB[1]);
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <update_7seg_B+0x68>)
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fece 	bl	80004e8 <display7SEGB>
		HAL_GPIO_WritePin(GPIOA, PA13_Pin, RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000752:	4811      	ldr	r0, [pc, #68]	; (8000798 <update_7seg_B+0x6c>)
 8000754:	f001 fb85 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA14_Pin, SET);
 8000758:	2201      	movs	r2, #1
 800075a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800075e:	480e      	ldr	r0, [pc, #56]	; (8000798 <update_7seg_B+0x6c>)
 8000760:	f001 fb7f 	bl	8001e62 <HAL_GPIO_WritePin>
		break;
 8000764:	e011      	b.n	800078a <update_7seg_B+0x5e>
		display7SEGB(buffer_indexB[0]);
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <update_7seg_B+0x68>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff febc 	bl	80004e8 <display7SEGB>
		HAL_GPIO_WritePin(GPIOA, PA13_Pin, SET);
 8000770:	2201      	movs	r2, #1
 8000772:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000776:	4808      	ldr	r0, [pc, #32]	; (8000798 <update_7seg_B+0x6c>)
 8000778:	f001 fb73 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA14_Pin, RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <update_7seg_B+0x6c>)
 8000784:	f001 fb6d 	bl	8001e62 <HAL_GPIO_WritePin>
		break;
 8000788:	bf00      	nop
	}
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200000b0 	.word	0x200000b0
 8000794:	20000108 	.word	0x20000108
 8000798:	40010800 	.word	0x40010800

0800079c <displayTraffic>:
int status_RED_B = 0;
int status_GREEN_B = 1;
int status_YELLOW_B = 0;


void displayTraffic() {
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	//group a
	if (status_RED_A == 1) {
 80007a0:	4b3e      	ldr	r3, [pc, #248]	; (800089c <displayTraffic+0x100>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d10e      	bne.n	80007c6 <displayTraffic+0x2a>
		HAL_GPIO_WritePin(GPIOA, PA5_Pin, SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	2120      	movs	r1, #32
 80007ac:	483c      	ldr	r0, [pc, #240]	; (80008a0 <displayTraffic+0x104>)
 80007ae:	f001 fb58 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA6_Pin, RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2140      	movs	r1, #64	; 0x40
 80007b6:	483a      	ldr	r0, [pc, #232]	; (80008a0 <displayTraffic+0x104>)
 80007b8:	f001 fb53 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA7_Pin, RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2180      	movs	r1, #128	; 0x80
 80007c0:	4837      	ldr	r0, [pc, #220]	; (80008a0 <displayTraffic+0x104>)
 80007c2:	f001 fb4e 	bl	8001e62 <HAL_GPIO_WritePin>
	}
	if (status_YELLOW_A == 1) {
 80007c6:	4b37      	ldr	r3, [pc, #220]	; (80008a4 <displayTraffic+0x108>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d10e      	bne.n	80007ec <displayTraffic+0x50>
		HAL_GPIO_WritePin(GPIOA, PA5_Pin, RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2120      	movs	r1, #32
 80007d2:	4833      	ldr	r0, [pc, #204]	; (80008a0 <displayTraffic+0x104>)
 80007d4:	f001 fb45 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA6_Pin, SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	2140      	movs	r1, #64	; 0x40
 80007dc:	4830      	ldr	r0, [pc, #192]	; (80008a0 <displayTraffic+0x104>)
 80007de:	f001 fb40 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA7_Pin, RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2180      	movs	r1, #128	; 0x80
 80007e6:	482e      	ldr	r0, [pc, #184]	; (80008a0 <displayTraffic+0x104>)
 80007e8:	f001 fb3b 	bl	8001e62 <HAL_GPIO_WritePin>
	}
	if (status_GREEN_A == 1) {
 80007ec:	4b2e      	ldr	r3, [pc, #184]	; (80008a8 <displayTraffic+0x10c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d10e      	bne.n	8000812 <displayTraffic+0x76>
		HAL_GPIO_WritePin(GPIOA, PA5_Pin, RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2120      	movs	r1, #32
 80007f8:	4829      	ldr	r0, [pc, #164]	; (80008a0 <displayTraffic+0x104>)
 80007fa:	f001 fb32 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA6_Pin, RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2140      	movs	r1, #64	; 0x40
 8000802:	4827      	ldr	r0, [pc, #156]	; (80008a0 <displayTraffic+0x104>)
 8000804:	f001 fb2d 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA7_Pin, SET);
 8000808:	2201      	movs	r2, #1
 800080a:	2180      	movs	r1, #128	; 0x80
 800080c:	4824      	ldr	r0, [pc, #144]	; (80008a0 <displayTraffic+0x104>)
 800080e:	f001 fb28 	bl	8001e62 <HAL_GPIO_WritePin>
	}
	//group b
	if (status_RED_B == 1) {
 8000812:	4b26      	ldr	r3, [pc, #152]	; (80008ac <displayTraffic+0x110>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d111      	bne.n	800083e <displayTraffic+0xa2>
		HAL_GPIO_WritePin(GPIOA, PA8_Pin, SET);
 800081a:	2201      	movs	r2, #1
 800081c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000820:	481f      	ldr	r0, [pc, #124]	; (80008a0 <displayTraffic+0x104>)
 8000822:	f001 fb1e 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA9_Pin, RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 7100 	mov.w	r1, #512	; 0x200
 800082c:	481c      	ldr	r0, [pc, #112]	; (80008a0 <displayTraffic+0x104>)
 800082e:	f001 fb18 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA10_Pin, RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000838:	4819      	ldr	r0, [pc, #100]	; (80008a0 <displayTraffic+0x104>)
 800083a:	f001 fb12 	bl	8001e62 <HAL_GPIO_WritePin>
	}
	if (status_YELLOW_B == 1) {
 800083e:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <displayTraffic+0x114>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d111      	bne.n	800086a <displayTraffic+0xce>
		HAL_GPIO_WritePin(GPIOA, PA8_Pin, RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 7180 	mov.w	r1, #256	; 0x100
 800084c:	4814      	ldr	r0, [pc, #80]	; (80008a0 <displayTraffic+0x104>)
 800084e:	f001 fb08 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA9_Pin, SET);
 8000852:	2201      	movs	r2, #1
 8000854:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000858:	4811      	ldr	r0, [pc, #68]	; (80008a0 <displayTraffic+0x104>)
 800085a:	f001 fb02 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA10_Pin, RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000864:	480e      	ldr	r0, [pc, #56]	; (80008a0 <displayTraffic+0x104>)
 8000866:	f001 fafc 	bl	8001e62 <HAL_GPIO_WritePin>
	}
	if (status_GREEN_B == 1) {
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <displayTraffic+0x118>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d111      	bne.n	8000896 <displayTraffic+0xfa>
		HAL_GPIO_WritePin(GPIOA, PA8_Pin, RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000878:	4809      	ldr	r0, [pc, #36]	; (80008a0 <displayTraffic+0x104>)
 800087a:	f001 faf2 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA9_Pin, RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000884:	4806      	ldr	r0, [pc, #24]	; (80008a0 <displayTraffic+0x104>)
 8000886:	f001 faec 	bl	8001e62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA10_Pin, SET);
 800088a:	2201      	movs	r2, #1
 800088c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000890:	4803      	ldr	r0, [pc, #12]	; (80008a0 <displayTraffic+0x104>)
 8000892:	f001 fae6 	bl	8001e62 <HAL_GPIO_WritePin>
	}
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000064 	.word	0x20000064
 80008a0:	40010800 	.word	0x40010800
 80008a4:	200000b8 	.word	0x200000b8
 80008a8:	200000b4 	.word	0x200000b4
 80008ac:	200000bc 	.word	0x200000bc
 80008b0:	200000c0 	.word	0x200000c0
 80008b4:	20000068 	.word	0x20000068

080008b8 <status_LED_A>:

void status_LED_A() {
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
	switch (status_A) {
 80008bc:	4b31      	ldr	r3, [pc, #196]	; (8000984 <status_LED_A+0xcc>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	3b0c      	subs	r3, #12
 80008c2:	2b0c      	cmp	r3, #12
 80008c4:	d858      	bhi.n	8000978 <status_LED_A+0xc0>
 80008c6:	a201      	add	r2, pc, #4	; (adr r2, 80008cc <status_LED_A+0x14>)
 80008c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008cc:	08000901 	.word	0x08000901
 80008d0:	08000951 	.word	0x08000951
 80008d4:	08000929 	.word	0x08000929
 80008d8:	08000979 	.word	0x08000979
 80008dc:	08000979 	.word	0x08000979
 80008e0:	08000979 	.word	0x08000979
 80008e4:	08000979 	.word	0x08000979
 80008e8:	08000979 	.word	0x08000979
 80008ec:	08000979 	.word	0x08000979
 80008f0:	08000979 	.word	0x08000979
 80008f4:	08000915 	.word	0x08000915
 80008f8:	08000965 	.word	0x08000965
 80008fc:	0800093d 	.word	0x0800093d
	case AUTO_RED:
		status_RED_A = 1;
 8000900:	4b21      	ldr	r3, [pc, #132]	; (8000988 <status_LED_A+0xd0>)
 8000902:	2201      	movs	r2, #1
 8000904:	601a      	str	r2, [r3, #0]
		status_GREEN_A = 0;
 8000906:	4b21      	ldr	r3, [pc, #132]	; (800098c <status_LED_A+0xd4>)
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
		status_YELLOW_A = 0;
 800090c:	4b20      	ldr	r3, [pc, #128]	; (8000990 <status_LED_A+0xd8>)
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
		break;
 8000912:	e032      	b.n	800097a <status_LED_A+0xc2>
	case MAN_RED:
		status_RED_A = 1;
 8000914:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <status_LED_A+0xd0>)
 8000916:	2201      	movs	r2, #1
 8000918:	601a      	str	r2, [r3, #0]
		status_GREEN_A = 0;
 800091a:	4b1c      	ldr	r3, [pc, #112]	; (800098c <status_LED_A+0xd4>)
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
		status_YELLOW_A = 0;
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <status_LED_A+0xd8>)
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
		break;
 8000926:	e028      	b.n	800097a <status_LED_A+0xc2>
	case AUTO_GREEN:
		status_RED_A = 0;
 8000928:	4b17      	ldr	r3, [pc, #92]	; (8000988 <status_LED_A+0xd0>)
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
		status_GREEN_A = 1;
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <status_LED_A+0xd4>)
 8000930:	2201      	movs	r2, #1
 8000932:	601a      	str	r2, [r3, #0]
		status_YELLOW_A = 0;
 8000934:	4b16      	ldr	r3, [pc, #88]	; (8000990 <status_LED_A+0xd8>)
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
		break;
 800093a:	e01e      	b.n	800097a <status_LED_A+0xc2>
	case MAN_GREEN:
		status_RED_A = 0;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <status_LED_A+0xd0>)
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
		status_GREEN_A = 1;
 8000942:	4b12      	ldr	r3, [pc, #72]	; (800098c <status_LED_A+0xd4>)
 8000944:	2201      	movs	r2, #1
 8000946:	601a      	str	r2, [r3, #0]
		status_YELLOW_A = 0;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <status_LED_A+0xd8>)
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
		break;
 800094e:	e014      	b.n	800097a <status_LED_A+0xc2>
	case AUTO_YELLOW:
		status_RED_A = 0;
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <status_LED_A+0xd0>)
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
		status_GREEN_A = 0;
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <status_LED_A+0xd4>)
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
		status_YELLOW_A = 1;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <status_LED_A+0xd8>)
 800095e:	2201      	movs	r2, #1
 8000960:	601a      	str	r2, [r3, #0]
		break;
 8000962:	e00a      	b.n	800097a <status_LED_A+0xc2>
	case MAN_YELLOW:
		status_RED_A = 0;
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <status_LED_A+0xd0>)
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
		status_GREEN_A = 0;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <status_LED_A+0xd4>)
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
		status_YELLOW_A = 1;
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <status_LED_A+0xd8>)
 8000972:	2201      	movs	r2, #1
 8000974:	601a      	str	r2, [r3, #0]
		break;
 8000976:	e000      	b.n	800097a <status_LED_A+0xc2>
	default:
		break;
 8000978:	bf00      	nop
	}
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	20000080 	.word	0x20000080
 8000988:	20000064 	.word	0x20000064
 800098c:	200000b4 	.word	0x200000b4
 8000990:	200000b8 	.word	0x200000b8

08000994 <status_LED_B>:

void status_LED_B(){
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
	switch (status_B) {
 8000998:	4b31      	ldr	r3, [pc, #196]	; (8000a60 <status_LED_B+0xcc>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	3b0c      	subs	r3, #12
 800099e:	2b0c      	cmp	r3, #12
 80009a0:	d858      	bhi.n	8000a54 <status_LED_B+0xc0>
 80009a2:	a201      	add	r2, pc, #4	; (adr r2, 80009a8 <status_LED_B+0x14>)
 80009a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a8:	080009dd 	.word	0x080009dd
 80009ac:	08000a05 	.word	0x08000a05
 80009b0:	080009f1 	.word	0x080009f1
 80009b4:	08000a55 	.word	0x08000a55
 80009b8:	08000a55 	.word	0x08000a55
 80009bc:	08000a55 	.word	0x08000a55
 80009c0:	08000a55 	.word	0x08000a55
 80009c4:	08000a55 	.word	0x08000a55
 80009c8:	08000a55 	.word	0x08000a55
 80009cc:	08000a55 	.word	0x08000a55
 80009d0:	08000a19 	.word	0x08000a19
 80009d4:	08000a41 	.word	0x08000a41
 80009d8:	08000a2d 	.word	0x08000a2d
	case AUTO_RED:
		status_RED_B = 1;
 80009dc:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <status_LED_B+0xd0>)
 80009de:	2201      	movs	r2, #1
 80009e0:	601a      	str	r2, [r3, #0]
		status_GREEN_B = 0;
 80009e2:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <status_LED_B+0xd4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
		status_YELLOW_B = 0;
 80009e8:	4b20      	ldr	r3, [pc, #128]	; (8000a6c <status_LED_B+0xd8>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
		break;
 80009ee:	e032      	b.n	8000a56 <status_LED_B+0xc2>
	case AUTO_GREEN:
		status_RED_B = 0;
 80009f0:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <status_LED_B+0xd0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
		status_GREEN_B = 1;
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <status_LED_B+0xd4>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	601a      	str	r2, [r3, #0]
		status_YELLOW_B = 0;
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <status_LED_B+0xd8>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
		break;
 8000a02:	e028      	b.n	8000a56 <status_LED_B+0xc2>
	case AUTO_YELLOW:
		status_RED_B = 0;
 8000a04:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <status_LED_B+0xd0>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
		status_GREEN_B = 0;
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <status_LED_B+0xd4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
		status_YELLOW_B = 1;
 8000a10:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <status_LED_B+0xd8>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	601a      	str	r2, [r3, #0]
		break;
 8000a16:	e01e      	b.n	8000a56 <status_LED_B+0xc2>
	case MAN_RED:
		status_RED_B = 1;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <status_LED_B+0xd0>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	601a      	str	r2, [r3, #0]
		status_GREEN_B = 0;
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <status_LED_B+0xd4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
		status_YELLOW_B = 0;
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <status_LED_B+0xd8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
		break;
 8000a2a:	e014      	b.n	8000a56 <status_LED_B+0xc2>
	case MAN_GREEN:
		status_RED_B = 0;
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <status_LED_B+0xd0>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
		status_GREEN_B = 1;
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <status_LED_B+0xd4>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	601a      	str	r2, [r3, #0]
		status_YELLOW_B = 0;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <status_LED_B+0xd8>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
		break;
 8000a3e:	e00a      	b.n	8000a56 <status_LED_B+0xc2>
	case MAN_YELLOW:
		status_RED_B = 0;
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <status_LED_B+0xd0>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
		status_GREEN_B = 0;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <status_LED_B+0xd4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
		status_YELLOW_B = 1;
 8000a4c:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <status_LED_B+0xd8>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	601a      	str	r2, [r3, #0]
		break;
 8000a52:	e000      	b.n	8000a56 <status_LED_B+0xc2>
	default:
		break;
 8000a54:	bf00      	nop
	}
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	20000084 	.word	0x20000084
 8000a64:	200000bc 	.word	0x200000bc
 8000a68:	20000068 	.word	0x20000068
 8000a6c:	200000c0 	.word	0x200000c0

08000a70 <fsm_7segA>:

int countDownA;
int countDownB;


void fsm_7segA() {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	switch (fsm_status_A) {
 8000a74:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <fsm_7segA+0xb0>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	3b1f      	subs	r3, #31
 8000a7a:	2b03      	cmp	r3, #3
 8000a7c:	d84c      	bhi.n	8000b18 <fsm_7segA+0xa8>
 8000a7e:	a201      	add	r2, pc, #4	; (adr r2, 8000a84 <fsm_7segA+0x14>)
 8000a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a84:	08000b19 	.word	0x08000b19
 8000a88:	08000a95 	.word	0x08000a95
 8000a8c:	08000aed 	.word	0x08000aed
 8000a90:	08000ac1 	.word	0x08000ac1
	case FSM_MAN:
		break;
	case FSM_RED:
		if (countDownA <= 0) {
 8000a94:	4b23      	ldr	r3, [pc, #140]	; (8000b24 <fsm_7segA+0xb4>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	dc06      	bgt.n	8000aaa <fsm_7segA+0x3a>
			countDownA = GREEN_Timer;
 8000a9c:	4b22      	ldr	r3, [pc, #136]	; (8000b28 <fsm_7segA+0xb8>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a20      	ldr	r2, [pc, #128]	; (8000b24 <fsm_7segA+0xb4>)
 8000aa2:	6013      	str	r3, [r2, #0]
			fsm_status_A= FSM_GREEN;
 8000aa4:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <fsm_7segA+0xb0>)
 8000aa6:	2222      	movs	r2, #34	; 0x22
 8000aa8:	601a      	str	r2, [r3, #0]
		}
		update_indexA(countDownA);
 8000aaa:	4b1e      	ldr	r3, [pc, #120]	; (8000b24 <fsm_7segA+0xb4>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fda8 	bl	8000604 <update_indexA>
			countDownA--;
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <fsm_7segA+0xb4>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	4a1a      	ldr	r2, [pc, #104]	; (8000b24 <fsm_7segA+0xb4>)
 8000abc:	6013      	str	r3, [r2, #0]
		break;
 8000abe:	e02c      	b.n	8000b1a <fsm_7segA+0xaa>
	case FSM_GREEN:
		if (countDownA <= 0) {
 8000ac0:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <fsm_7segA+0xb4>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	dc06      	bgt.n	8000ad6 <fsm_7segA+0x66>
			countDownA = YELLOW_Timer;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <fsm_7segA+0xbc>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a15      	ldr	r2, [pc, #84]	; (8000b24 <fsm_7segA+0xb4>)
 8000ace:	6013      	str	r3, [r2, #0]
			fsm_status_A= FSM_YELLOW;
 8000ad0:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <fsm_7segA+0xb0>)
 8000ad2:	2221      	movs	r2, #33	; 0x21
 8000ad4:	601a      	str	r2, [r3, #0]
		}
		update_indexA(countDownA);
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <fsm_7segA+0xb4>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fd92 	bl	8000604 <update_indexA>
			countDownA--;
 8000ae0:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <fsm_7segA+0xb4>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <fsm_7segA+0xb4>)
 8000ae8:	6013      	str	r3, [r2, #0]
		break;
 8000aea:	e016      	b.n	8000b1a <fsm_7segA+0xaa>
	case FSM_YELLOW:
		if (countDownA <= 0) {
 8000aec:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <fsm_7segA+0xb4>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	dc06      	bgt.n	8000b02 <fsm_7segA+0x92>
			fsm_status_A= FSM_RED;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <fsm_7segA+0xb0>)
 8000af6:	2220      	movs	r2, #32
 8000af8:	601a      	str	r2, [r3, #0]
			countDownA = RED_Timer;
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <fsm_7segA+0xc0>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a09      	ldr	r2, [pc, #36]	; (8000b24 <fsm_7segA+0xb4>)
 8000b00:	6013      	str	r3, [r2, #0]
		}
		update_indexA(countDownA);
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <fsm_7segA+0xb4>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fd7c 	bl	8000604 <update_indexA>
			countDownA--;
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <fsm_7segA+0xb4>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	3b01      	subs	r3, #1
 8000b12:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <fsm_7segA+0xb4>)
 8000b14:	6013      	str	r3, [r2, #0]
		break;
 8000b16:	e000      	b.n	8000b1a <fsm_7segA+0xaa>

	default:
		break;
 8000b18:	bf00      	nop
	}

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000078 	.word	0x20000078
 8000b24:	200000d4 	.word	0x200000d4
 8000b28:	20000074 	.word	0x20000074
 8000b2c:	20000070 	.word	0x20000070
 8000b30:	2000006c 	.word	0x2000006c

08000b34 <fsm_7segB>:

void fsm_7segB() {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	switch (fsm_status_B) {
 8000b38:	4b2a      	ldr	r3, [pc, #168]	; (8000be4 <fsm_7segB+0xb0>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	3b1f      	subs	r3, #31
 8000b3e:	2b03      	cmp	r3, #3
 8000b40:	d84c      	bhi.n	8000bdc <fsm_7segB+0xa8>
 8000b42:	a201      	add	r2, pc, #4	; (adr r2, 8000b48 <fsm_7segB+0x14>)
 8000b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b48:	08000bdd 	.word	0x08000bdd
 8000b4c:	08000bb1 	.word	0x08000bb1
 8000b50:	08000b85 	.word	0x08000b85
 8000b54:	08000b59 	.word	0x08000b59
	case FSM_MAN:
		break;
	case FSM_GREEN:
		if(countDownB <=0){
 8000b58:	4b23      	ldr	r3, [pc, #140]	; (8000be8 <fsm_7segB+0xb4>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	dc06      	bgt.n	8000b6e <fsm_7segB+0x3a>
			countDownB = YELLOW_Timer;
 8000b60:	4b22      	ldr	r3, [pc, #136]	; (8000bec <fsm_7segB+0xb8>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a20      	ldr	r2, [pc, #128]	; (8000be8 <fsm_7segB+0xb4>)
 8000b66:	6013      	str	r3, [r2, #0]
			fsm_status_B= FSM_YELLOW;
 8000b68:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <fsm_7segB+0xb0>)
 8000b6a:	2221      	movs	r2, #33	; 0x21
 8000b6c:	601a      	str	r2, [r3, #0]
		}
		update_indexB(countDownB);
 8000b6e:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <fsm_7segB+0xb4>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fd74 	bl	8000660 <update_indexB>
			countDownB--;
 8000b78:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <fsm_7segB+0xb4>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	4a1a      	ldr	r2, [pc, #104]	; (8000be8 <fsm_7segB+0xb4>)
 8000b80:	6013      	str	r3, [r2, #0]

		break;
 8000b82:	e02c      	b.n	8000bde <fsm_7segB+0xaa>
	case FSM_YELLOW:
		if (countDownB <= 0) {
 8000b84:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <fsm_7segB+0xb4>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	dc06      	bgt.n	8000b9a <fsm_7segB+0x66>
			countDownB = RED_Timer;
 8000b8c:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <fsm_7segB+0xbc>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a15      	ldr	r2, [pc, #84]	; (8000be8 <fsm_7segB+0xb4>)
 8000b92:	6013      	str	r3, [r2, #0]
			fsm_status_B= FSM_RED;
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <fsm_7segB+0xb0>)
 8000b96:	2220      	movs	r2, #32
 8000b98:	601a      	str	r2, [r3, #0]
		}
		update_indexB(countDownB);
 8000b9a:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <fsm_7segB+0xb4>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fd5e 	bl	8000660 <update_indexB>
			countDownB--;
 8000ba4:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <fsm_7segB+0xb4>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	4a0f      	ldr	r2, [pc, #60]	; (8000be8 <fsm_7segB+0xb4>)
 8000bac:	6013      	str	r3, [r2, #0]


		break;
 8000bae:	e016      	b.n	8000bde <fsm_7segB+0xaa>
	case FSM_RED:
		if (countDownB <= 0) {
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <fsm_7segB+0xb4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	dc06      	bgt.n	8000bc6 <fsm_7segB+0x92>
			countDownB = GREEN_Timer;
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <fsm_7segB+0xc0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <fsm_7segB+0xb4>)
 8000bbe:	6013      	str	r3, [r2, #0]
			fsm_status_B= FSM_GREEN;
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <fsm_7segB+0xb0>)
 8000bc2:	2222      	movs	r2, #34	; 0x22
 8000bc4:	601a      	str	r2, [r3, #0]
		}
		update_indexB(countDownB);
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <fsm_7segB+0xb4>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fd48 	bl	8000660 <update_indexB>
			countDownB--;
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <fsm_7segB+0xb4>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <fsm_7segB+0xb4>)
 8000bd8:	6013      	str	r3, [r2, #0]
		break;
 8000bda:	e000      	b.n	8000bde <fsm_7segB+0xaa>
	default:
		break;
 8000bdc:	bf00      	nop
	}
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	2000007c 	.word	0x2000007c
 8000be8:	200000f0 	.word	0x200000f0
 8000bec:	20000070 	.word	0x20000070
 8000bf0:	2000006c 	.word	0x2000006c
 8000bf4:	20000074 	.word	0x20000074

08000bf8 <fsm_7seg_run>:

void fsm_7seg_run() {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	fsm_7segA();
 8000bfc:	f7ff ff38 	bl	8000a70 <fsm_7segA>
	fsm_7segB();
 8000c00:	f7ff ff98 	bl	8000b34 <fsm_7segB>
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <display_fsm_7seg>:

void display_fsm_7seg(){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	display_fsm_7segB();
 8000c0c:	f000 f828 	bl	8000c60 <display_fsm_7segB>
	display_fsm_7segA();
 8000c10:	f000 f802 	bl	8000c18 <display_fsm_7segA>
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <display_fsm_7segA>:
void display_fsm_7segA(){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	switch (fsm_status_A) {
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <display_fsm_7segA+0x44>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	3b1f      	subs	r3, #31
 8000c22:	2b03      	cmp	r3, #3
 8000c24:	d816      	bhi.n	8000c54 <display_fsm_7segA+0x3c>
 8000c26:	a201      	add	r2, pc, #4	; (adr r2, 8000c2c <display_fsm_7segA+0x14>)
 8000c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c2c:	08000c3d 	.word	0x08000c3d
 8000c30:	08000c43 	.word	0x08000c43
 8000c34:	08000c4f 	.word	0x08000c4f
 8000c38:	08000c49 	.word	0x08000c49
	case FSM_MAN:
		update_7seg_A();
 8000c3c:	f7ff fd3e 	bl	80006bc <update_7seg_A>
		break;
 8000c40:	e009      	b.n	8000c56 <display_fsm_7segA+0x3e>
	case FSM_RED:
		update_7seg_A();
 8000c42:	f7ff fd3b 	bl	80006bc <update_7seg_A>
		break;
 8000c46:	e006      	b.n	8000c56 <display_fsm_7segA+0x3e>
	case FSM_GREEN:
		update_7seg_A();
 8000c48:	f7ff fd38 	bl	80006bc <update_7seg_A>
		break;
 8000c4c:	e003      	b.n	8000c56 <display_fsm_7segA+0x3e>
	case FSM_YELLOW:
		update_7seg_A();
 8000c4e:	f7ff fd35 	bl	80006bc <update_7seg_A>
		break;
 8000c52:	e000      	b.n	8000c56 <display_fsm_7segA+0x3e>
	default:
		break;
 8000c54:	bf00      	nop
	}
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000078 	.word	0x20000078

08000c60 <display_fsm_7segB>:
void display_fsm_7segB(){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	switch (fsm_status_B) {
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <display_fsm_7segB+0x44>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	3b1f      	subs	r3, #31
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	d816      	bhi.n	8000c9c <display_fsm_7segB+0x3c>
 8000c6e:	a201      	add	r2, pc, #4	; (adr r2, 8000c74 <display_fsm_7segB+0x14>)
 8000c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c74:	08000c85 	.word	0x08000c85
 8000c78:	08000c8b 	.word	0x08000c8b
 8000c7c:	08000c97 	.word	0x08000c97
 8000c80:	08000c91 	.word	0x08000c91
	case FSM_MAN:
		update_7seg_B();
 8000c84:	f7ff fd52 	bl	800072c <update_7seg_B>
		break;
 8000c88:	e009      	b.n	8000c9e <display_fsm_7segB+0x3e>
	case FSM_RED:
		update_7seg_B();
 8000c8a:	f7ff fd4f 	bl	800072c <update_7seg_B>
		break;
 8000c8e:	e006      	b.n	8000c9e <display_fsm_7segB+0x3e>
	case FSM_GREEN:
		update_7seg_B();
 8000c90:	f7ff fd4c 	bl	800072c <update_7seg_B>
		break;
 8000c94:	e003      	b.n	8000c9e <display_fsm_7segB+0x3e>
	case FSM_YELLOW:
		update_7seg_B();
 8000c96:	f7ff fd49 	bl	800072c <update_7seg_B>
		break;
 8000c9a:	e000      	b.n	8000c9e <display_fsm_7segB+0x3e>
	default:
		break;
 8000c9c:	bf00      	nop
	}
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	2000007c 	.word	0x2000007c

08000ca8 <fsm_automatic_run_A>:

int Count_LED_A;
int Count_LED_B;


void fsm_automatic_run_A(){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

	switch (status_A) {
 8000cac:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <fsm_automatic_run_A+0xa0>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b0e      	cmp	r3, #14
 8000cb2:	d01b      	beq.n	8000cec <fsm_automatic_run_A+0x44>
 8000cb4:	2b0e      	cmp	r3, #14
 8000cb6:	dc43      	bgt.n	8000d40 <fsm_automatic_run_A+0x98>
 8000cb8:	2b0c      	cmp	r3, #12
 8000cba:	d002      	beq.n	8000cc2 <fsm_automatic_run_A+0x1a>
 8000cbc:	2b0d      	cmp	r3, #13
 8000cbe:	d02a      	beq.n	8000d16 <fsm_automatic_run_A+0x6e>
			status_LED_A();
			displayTraffic();
				Count_LED_A--;
			break;
		default:
			break;
 8000cc0:	e03e      	b.n	8000d40 <fsm_automatic_run_A+0x98>
			if(Count_LED_A <= 0 ){
 8000cc2:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <fsm_automatic_run_A+0xa4>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	dc06      	bgt.n	8000cd8 <fsm_automatic_run_A+0x30>
				status_A = AUTO_GREEN;
 8000cca:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <fsm_automatic_run_A+0xa0>)
 8000ccc:	220e      	movs	r2, #14
 8000cce:	601a      	str	r2, [r3, #0]
				Count_LED_A = GREEN_Timer;
 8000cd0:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <fsm_automatic_run_A+0xa8>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a1d      	ldr	r2, [pc, #116]	; (8000d4c <fsm_automatic_run_A+0xa4>)
 8000cd6:	6013      	str	r3, [r2, #0]
			status_LED_A();
 8000cd8:	f7ff fdee 	bl	80008b8 <status_LED_A>
			displayTraffic();
 8000cdc:	f7ff fd5e 	bl	800079c <displayTraffic>
				Count_LED_A--;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <fsm_automatic_run_A+0xa4>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	4a19      	ldr	r2, [pc, #100]	; (8000d4c <fsm_automatic_run_A+0xa4>)
 8000ce8:	6013      	str	r3, [r2, #0]
			break;
 8000cea:	e02a      	b.n	8000d42 <fsm_automatic_run_A+0x9a>
			if(Count_LED_A <= 0 ){
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <fsm_automatic_run_A+0xa4>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	dc06      	bgt.n	8000d02 <fsm_automatic_run_A+0x5a>
				status_A = AUTO_YELLOW;
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <fsm_automatic_run_A+0xa0>)
 8000cf6:	220d      	movs	r2, #13
 8000cf8:	601a      	str	r2, [r3, #0]
				Count_LED_A = YELLOW_Timer;
 8000cfa:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <fsm_automatic_run_A+0xac>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a13      	ldr	r2, [pc, #76]	; (8000d4c <fsm_automatic_run_A+0xa4>)
 8000d00:	6013      	str	r3, [r2, #0]
			status_LED_A();
 8000d02:	f7ff fdd9 	bl	80008b8 <status_LED_A>
			displayTraffic();
 8000d06:	f7ff fd49 	bl	800079c <displayTraffic>
				Count_LED_A--;
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <fsm_automatic_run_A+0xa4>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <fsm_automatic_run_A+0xa4>)
 8000d12:	6013      	str	r3, [r2, #0]
			break;
 8000d14:	e015      	b.n	8000d42 <fsm_automatic_run_A+0x9a>
			if(Count_LED_A <= 0 ){
 8000d16:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <fsm_automatic_run_A+0xa4>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	dc06      	bgt.n	8000d2c <fsm_automatic_run_A+0x84>
				status_A= AUTO_RED;
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <fsm_automatic_run_A+0xa0>)
 8000d20:	220c      	movs	r2, #12
 8000d22:	601a      	str	r2, [r3, #0]
				Count_LED_A = RED_Timer;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <fsm_automatic_run_A+0xb0>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <fsm_automatic_run_A+0xa4>)
 8000d2a:	6013      	str	r3, [r2, #0]
			status_LED_A();
 8000d2c:	f7ff fdc4 	bl	80008b8 <status_LED_A>
			displayTraffic();
 8000d30:	f7ff fd34 	bl	800079c <displayTraffic>
				Count_LED_A--;
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <fsm_automatic_run_A+0xa4>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <fsm_automatic_run_A+0xa4>)
 8000d3c:	6013      	str	r3, [r2, #0]
			break;
 8000d3e:	e000      	b.n	8000d42 <fsm_automatic_run_A+0x9a>
			break;
 8000d40:	bf00      	nop
		}
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000080 	.word	0x20000080
 8000d4c:	200000d0 	.word	0x200000d0
 8000d50:	20000074 	.word	0x20000074
 8000d54:	20000070 	.word	0x20000070
 8000d58:	2000006c 	.word	0x2000006c

08000d5c <fsm_automatic_run_B>:

void fsm_automatic_run_B(){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	switch (status_B) {
 8000d60:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <fsm_automatic_run_B+0xa0>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b0e      	cmp	r3, #14
 8000d66:	d006      	beq.n	8000d76 <fsm_automatic_run_B+0x1a>
 8000d68:	2b0e      	cmp	r3, #14
 8000d6a:	dc43      	bgt.n	8000df4 <fsm_automatic_run_B+0x98>
 8000d6c:	2b0c      	cmp	r3, #12
 8000d6e:	d02c      	beq.n	8000dca <fsm_automatic_run_B+0x6e>
 8000d70:	2b0d      	cmp	r3, #13
 8000d72:	d015      	beq.n	8000da0 <fsm_automatic_run_B+0x44>
			displayTraffic();
				Count_LED_B--;

			break;
		default:
			break;
 8000d74:	e03e      	b.n	8000df4 <fsm_automatic_run_B+0x98>
			if(Count_LED_B <= 0 ){
 8000d76:	4b22      	ldr	r3, [pc, #136]	; (8000e00 <fsm_automatic_run_B+0xa4>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	dc06      	bgt.n	8000d8c <fsm_automatic_run_B+0x30>
				status_B= AUTO_YELLOW;
 8000d7e:	4b1f      	ldr	r3, [pc, #124]	; (8000dfc <fsm_automatic_run_B+0xa0>)
 8000d80:	220d      	movs	r2, #13
 8000d82:	601a      	str	r2, [r3, #0]
				Count_LED_B = YELLOW_Timer;
 8000d84:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <fsm_automatic_run_B+0xa8>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a1d      	ldr	r2, [pc, #116]	; (8000e00 <fsm_automatic_run_B+0xa4>)
 8000d8a:	6013      	str	r3, [r2, #0]
			status_LED_B();
 8000d8c:	f7ff fe02 	bl	8000994 <status_LED_B>
			displayTraffic();
 8000d90:	f7ff fd04 	bl	800079c <displayTraffic>
				Count_LED_B--;
 8000d94:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <fsm_automatic_run_B+0xa4>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	4a19      	ldr	r2, [pc, #100]	; (8000e00 <fsm_automatic_run_B+0xa4>)
 8000d9c:	6013      	str	r3, [r2, #0]
			break;
 8000d9e:	e02a      	b.n	8000df6 <fsm_automatic_run_B+0x9a>
			if(Count_LED_B <= 0 ){
 8000da0:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <fsm_automatic_run_B+0xa4>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	dc06      	bgt.n	8000db6 <fsm_automatic_run_B+0x5a>
				status_B= AUTO_RED;
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <fsm_automatic_run_B+0xa0>)
 8000daa:	220c      	movs	r2, #12
 8000dac:	601a      	str	r2, [r3, #0]
				Count_LED_B = RED_Timer;
 8000dae:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <fsm_automatic_run_B+0xac>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a13      	ldr	r2, [pc, #76]	; (8000e00 <fsm_automatic_run_B+0xa4>)
 8000db4:	6013      	str	r3, [r2, #0]
			status_LED_B();
 8000db6:	f7ff fded 	bl	8000994 <status_LED_B>
			displayTraffic();
 8000dba:	f7ff fcef 	bl	800079c <displayTraffic>
				Count_LED_B--;
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <fsm_automatic_run_B+0xa4>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <fsm_automatic_run_B+0xa4>)
 8000dc6:	6013      	str	r3, [r2, #0]
			break;
 8000dc8:	e015      	b.n	8000df6 <fsm_automatic_run_B+0x9a>
			if(Count_LED_B <= 0 ){
 8000dca:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <fsm_automatic_run_B+0xa4>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	dc06      	bgt.n	8000de0 <fsm_automatic_run_B+0x84>
				status_B= AUTO_GREEN;
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <fsm_automatic_run_B+0xa0>)
 8000dd4:	220e      	movs	r2, #14
 8000dd6:	601a      	str	r2, [r3, #0]
				Count_LED_B = GREEN_Timer;
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <fsm_automatic_run_B+0xb0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a08      	ldr	r2, [pc, #32]	; (8000e00 <fsm_automatic_run_B+0xa4>)
 8000dde:	6013      	str	r3, [r2, #0]
			status_LED_B();
 8000de0:	f7ff fdd8 	bl	8000994 <status_LED_B>
			displayTraffic();
 8000de4:	f7ff fcda 	bl	800079c <displayTraffic>
				Count_LED_B--;
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <fsm_automatic_run_B+0xa4>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <fsm_automatic_run_B+0xa4>)
 8000df0:	6013      	str	r3, [r2, #0]
			break;
 8000df2:	e000      	b.n	8000df6 <fsm_automatic_run_B+0x9a>
			break;
 8000df4:	bf00      	nop
		}
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000084 	.word	0x20000084
 8000e00:	200000d8 	.word	0x200000d8
 8000e04:	20000070 	.word	0x20000070
 8000e08:	2000006c 	.word	0x2000006c
 8000e0c:	20000074 	.word	0x20000074

08000e10 <fsm_automatic_run>:

void fsm_automatic_run() {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	fsm_automatic_run_A();
 8000e14:	f7ff ff48 	bl	8000ca8 <fsm_automatic_run_A>
	fsm_automatic_run_B();
 8000e18:	f7ff ffa0 	bl	8000d5c <fsm_automatic_run_B>
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <fsm_manual_run_A>:


#include "fsm_manual.h"


void fsm_manual_run_A() {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	status_LED_A();
 8000e24:	f7ff fd48 	bl	80008b8 <status_LED_A>
	switch (status_A) {
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <fsm_manual_run_A+0x68>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b18      	cmp	r3, #24
 8000e2e:	d011      	beq.n	8000e54 <fsm_manual_run_A+0x34>
 8000e30:	2b18      	cmp	r3, #24
 8000e32:	dc25      	bgt.n	8000e80 <fsm_manual_run_A+0x60>
 8000e34:	2b16      	cmp	r3, #22
 8000e36:	d002      	beq.n	8000e3e <fsm_manual_run_A+0x1e>
 8000e38:	2b17      	cmp	r3, #23
 8000e3a:	d016      	beq.n	8000e6a <fsm_manual_run_A+0x4a>
	case MAN_YELLOW:
		displayTraffic();
		update_indexA(YELLOW_Timer + countTemp );
		break;
	default:
		break;
 8000e3c:	e020      	b.n	8000e80 <fsm_manual_run_A+0x60>
		displayTraffic();
 8000e3e:	f7ff fcad 	bl	800079c <displayTraffic>
		update_indexA(RED_Timer + countTemp );
 8000e42:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <fsm_manual_run_A+0x6c>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <fsm_manual_run_A+0x70>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fbd9 	bl	8000604 <update_indexA>
		break;
 8000e52:	e016      	b.n	8000e82 <fsm_manual_run_A+0x62>
		displayTraffic();
 8000e54:	f7ff fca2 	bl	800079c <displayTraffic>
		update_indexA(GREEN_Timer + countTemp );
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <fsm_manual_run_A+0x74>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <fsm_manual_run_A+0x70>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4413      	add	r3, r2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fbce 	bl	8000604 <update_indexA>
		break;
 8000e68:	e00b      	b.n	8000e82 <fsm_manual_run_A+0x62>
		displayTraffic();
 8000e6a:	f7ff fc97 	bl	800079c <displayTraffic>
		update_indexA(YELLOW_Timer + countTemp );
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <fsm_manual_run_A+0x78>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <fsm_manual_run_A+0x70>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fbc3 	bl	8000604 <update_indexA>
		break;
 8000e7e:	e000      	b.n	8000e82 <fsm_manual_run_A+0x62>
		break;
 8000e80:	bf00      	nop
	}
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000080 	.word	0x20000080
 8000e8c:	2000006c 	.word	0x2000006c
 8000e90:	200000c4 	.word	0x200000c4
 8000e94:	20000074 	.word	0x20000074
 8000e98:	20000070 	.word	0x20000070

08000e9c <fsm_manual_run_B>:
void fsm_manual_run_B() {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
	status_LED_B();
 8000ea0:	f7ff fd78 	bl	8000994 <status_LED_B>
	switch (status_B) {
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <fsm_manual_run_B+0x48>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b18      	cmp	r3, #24
 8000eaa:	d00c      	beq.n	8000ec6 <fsm_manual_run_B+0x2a>
 8000eac:	2b18      	cmp	r3, #24
 8000eae:	dc16      	bgt.n	8000ede <fsm_manual_run_B+0x42>
 8000eb0:	2b16      	cmp	r3, #22
 8000eb2:	d002      	beq.n	8000eba <fsm_manual_run_B+0x1e>
 8000eb4:	2b17      	cmp	r3, #23
 8000eb6:	d00c      	beq.n	8000ed2 <fsm_manual_run_B+0x36>
	case MAN_YELLOW:
		displayTraffic();
		update_indexB(MODE3);
		break;
	default:
		break;
 8000eb8:	e011      	b.n	8000ede <fsm_manual_run_B+0x42>
		displayTraffic();
 8000eba:	f7ff fc6f 	bl	800079c <displayTraffic>
		update_indexB(MODE2);
 8000ebe:	2002      	movs	r0, #2
 8000ec0:	f7ff fbce 	bl	8000660 <update_indexB>
		break;
 8000ec4:	e00c      	b.n	8000ee0 <fsm_manual_run_B+0x44>
		displayTraffic();
 8000ec6:	f7ff fc69 	bl	800079c <displayTraffic>
		update_indexB(MODE4);
 8000eca:	2004      	movs	r0, #4
 8000ecc:	f7ff fbc8 	bl	8000660 <update_indexB>
		break;
 8000ed0:	e006      	b.n	8000ee0 <fsm_manual_run_B+0x44>
		displayTraffic();
 8000ed2:	f7ff fc63 	bl	800079c <displayTraffic>
		update_indexB(MODE3);
 8000ed6:	2003      	movs	r0, #3
 8000ed8:	f7ff fbc2 	bl	8000660 <update_indexB>
		break;
 8000edc:	e000      	b.n	8000ee0 <fsm_manual_run_B+0x44>
		break;
 8000ede:	bf00      	nop
	}
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000084 	.word	0x20000084

08000ee8 <fsm_manual_run>:

void fsm_manual_run() {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
fsm_manual_run_A();
 8000eec:	f7ff ff98 	bl	8000e20 <fsm_manual_run_A>
fsm_manual_run_B();
 8000ef0:	f7ff ffd4 	bl	8000e9c <fsm_manual_run_B>
}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <countPressButton1>:
#include "fsm_setting.h"

int countTemp = 0 ;


void countPressButton1(){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	if(IsButtonPress(0) == 1){
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff f925 	bl	800014c <IsButtonPress>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d104      	bne.n	8000f12 <countPressButton1+0x1a>
		status_mode++;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <countPressButton1+0x2c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <countPressButton1+0x2c>)
 8000f10:	6013      	str	r3, [r2, #0]
	}
	if(status_mode == MODE4 + 1){
 8000f12:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <countPressButton1+0x2c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b05      	cmp	r3, #5
 8000f18:	d102      	bne.n	8000f20 <countPressButton1+0x28>
		status_mode = MODE0;
 8000f1a:	4b02      	ldr	r3, [pc, #8]	; (8000f24 <countPressButton1+0x2c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
	}
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	200000c8 	.word	0x200000c8

08000f28 <fsm_mode>:

void fsm_mode(){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	countPressButton1();
 8000f2c:	f7ff ffe4 	bl	8000ef8 <countPressButton1>
	fsm_manual_run();
 8000f30:	f7ff ffda 	bl	8000ee8 <fsm_manual_run>
	fsm_automatic_run();
 8000f34:	f7ff ff6c 	bl	8000e10 <fsm_automatic_run>
	switch(status_mode){
 8000f38:	4b6d      	ldr	r3, [pc, #436]	; (80010f0 <fsm_mode+0x1c8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b04      	cmp	r3, #4
 8000f3e:	f200 80cb 	bhi.w	80010d8 <fsm_mode+0x1b0>
 8000f42:	a201      	add	r2, pc, #4	; (adr r2, 8000f48 <fsm_mode+0x20>)
 8000f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f48:	08000f5d 	.word	0x08000f5d
 8000f4c:	08000f9d 	.word	0x08000f9d
 8000f50:	08000fb3 	.word	0x08000fb3
 8000f54:	08001015 	.word	0x08001015
 8000f58:	08001077 	.word	0x08001077
	case MODE0:
		status_mode = MODE1;
 8000f5c:	4b64      	ldr	r3, [pc, #400]	; (80010f0 <fsm_mode+0x1c8>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	601a      	str	r2, [r3, #0]
		status_A = AUTO_RED;
 8000f62:	4b64      	ldr	r3, [pc, #400]	; (80010f4 <fsm_mode+0x1cc>)
 8000f64:	220c      	movs	r2, #12
 8000f66:	601a      	str	r2, [r3, #0]
		status_B = AUTO_GREEN;
 8000f68:	4b63      	ldr	r3, [pc, #396]	; (80010f8 <fsm_mode+0x1d0>)
 8000f6a:	220e      	movs	r2, #14
 8000f6c:	601a      	str	r2, [r3, #0]

		fsm_status_A = FSM_RED;
 8000f6e:	4b63      	ldr	r3, [pc, #396]	; (80010fc <fsm_mode+0x1d4>)
 8000f70:	2220      	movs	r2, #32
 8000f72:	601a      	str	r2, [r3, #0]
		fsm_status_B = FSM_GREEN;
 8000f74:	4b62      	ldr	r3, [pc, #392]	; (8001100 <fsm_mode+0x1d8>)
 8000f76:	2222      	movs	r2, #34	; 0x22
 8000f78:	601a      	str	r2, [r3, #0]

		Count_LED_A = RED_Timer;
 8000f7a:	4b62      	ldr	r3, [pc, #392]	; (8001104 <fsm_mode+0x1dc>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a62      	ldr	r2, [pc, #392]	; (8001108 <fsm_mode+0x1e0>)
 8000f80:	6013      	str	r3, [r2, #0]
		Count_LED_B = GREEN_Timer;
 8000f82:	4b62      	ldr	r3, [pc, #392]	; (800110c <fsm_mode+0x1e4>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a62      	ldr	r2, [pc, #392]	; (8001110 <fsm_mode+0x1e8>)
 8000f88:	6013      	str	r3, [r2, #0]

		countDownA=RED_Timer;
 8000f8a:	4b5e      	ldr	r3, [pc, #376]	; (8001104 <fsm_mode+0x1dc>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a61      	ldr	r2, [pc, #388]	; (8001114 <fsm_mode+0x1ec>)
 8000f90:	6013      	str	r3, [r2, #0]
		countDownB=GREEN_Timer;
 8000f92:	4b5e      	ldr	r3, [pc, #376]	; (800110c <fsm_mode+0x1e4>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a60      	ldr	r2, [pc, #384]	; (8001118 <fsm_mode+0x1f0>)
 8000f98:	6013      	str	r3, [r2, #0]

		break;
 8000f9a:	e0a6      	b.n	80010ea <fsm_mode+0x1c2>
	case MODE1:
		if(IsButtonPress(0) == 1){
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f7ff f8d5 	bl	800014c <IsButtonPress>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	f040 8099 	bne.w	80010dc <fsm_mode+0x1b4>
			status_mode = MODE2;
 8000faa:	4b51      	ldr	r3, [pc, #324]	; (80010f0 <fsm_mode+0x1c8>)
 8000fac:	2202      	movs	r2, #2
 8000fae:	601a      	str	r2, [r3, #0]
		}
		break;
 8000fb0:	e094      	b.n	80010dc <fsm_mode+0x1b4>
	case MODE2:
		status_A = MAN_RED;
 8000fb2:	4b50      	ldr	r3, [pc, #320]	; (80010f4 <fsm_mode+0x1cc>)
 8000fb4:	2216      	movs	r2, #22
 8000fb6:	601a      	str	r2, [r3, #0]
		status_B = MAN_RED;
 8000fb8:	4b4f      	ldr	r3, [pc, #316]	; (80010f8 <fsm_mode+0x1d0>)
 8000fba:	2216      	movs	r2, #22
 8000fbc:	601a      	str	r2, [r3, #0]
		fsm_status_A = FSM_MAN;
 8000fbe:	4b4f      	ldr	r3, [pc, #316]	; (80010fc <fsm_mode+0x1d4>)
 8000fc0:	221f      	movs	r2, #31
 8000fc2:	601a      	str	r2, [r3, #0]
		fsm_status_B = FSM_MAN;
 8000fc4:	4b4e      	ldr	r3, [pc, #312]	; (8001100 <fsm_mode+0x1d8>)
 8000fc6:	221f      	movs	r2, #31
 8000fc8:	601a      	str	r2, [r3, #0]
		if(IsButtonPress(0) == 1){
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff f8be 	bl	800014c <IsButtonPress>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d102      	bne.n	8000fdc <fsm_mode+0xb4>
			status_mode = MODE3;
 8000fd6:	4b46      	ldr	r3, [pc, #280]	; (80010f0 <fsm_mode+0x1c8>)
 8000fd8:	2203      	movs	r2, #3
 8000fda:	601a      	str	r2, [r3, #0]
		}
		if(IsButtonPress(1) == 1){
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f7ff f8b5 	bl	800014c <IsButtonPress>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d104      	bne.n	8000ff2 <fsm_mode+0xca>
			// add value
			countTemp+=1;
 8000fe8:	4b4c      	ldr	r3, [pc, #304]	; (800111c <fsm_mode+0x1f4>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	3301      	adds	r3, #1
 8000fee:	4a4b      	ldr	r2, [pc, #300]	; (800111c <fsm_mode+0x1f4>)
 8000ff0:	6013      	str	r3, [r2, #0]
		}
		if(IsButtonPress(2) == 1){
 8000ff2:	2002      	movs	r0, #2
 8000ff4:	f7ff f8aa 	bl	800014c <IsButtonPress>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d170      	bne.n	80010e0 <fsm_mode+0x1b8>
			//set value
			RED_Timer = RED_Timer + countTemp;
 8000ffe:	4b41      	ldr	r3, [pc, #260]	; (8001104 <fsm_mode+0x1dc>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	4b46      	ldr	r3, [pc, #280]	; (800111c <fsm_mode+0x1f4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4413      	add	r3, r2
 8001008:	4a3e      	ldr	r2, [pc, #248]	; (8001104 <fsm_mode+0x1dc>)
 800100a:	6013      	str	r3, [r2, #0]
			countTemp=0;
 800100c:	4b43      	ldr	r3, [pc, #268]	; (800111c <fsm_mode+0x1f4>)
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
		}
		break;
 8001012:	e065      	b.n	80010e0 <fsm_mode+0x1b8>
	case MODE3:
		status_A = MAN_YELLOW;
 8001014:	4b37      	ldr	r3, [pc, #220]	; (80010f4 <fsm_mode+0x1cc>)
 8001016:	2217      	movs	r2, #23
 8001018:	601a      	str	r2, [r3, #0]
		status_B = MAN_YELLOW;
 800101a:	4b37      	ldr	r3, [pc, #220]	; (80010f8 <fsm_mode+0x1d0>)
 800101c:	2217      	movs	r2, #23
 800101e:	601a      	str	r2, [r3, #0]
		fsm_status_A = FSM_MAN;
 8001020:	4b36      	ldr	r3, [pc, #216]	; (80010fc <fsm_mode+0x1d4>)
 8001022:	221f      	movs	r2, #31
 8001024:	601a      	str	r2, [r3, #0]
		fsm_status_B = FSM_MAN;
 8001026:	4b36      	ldr	r3, [pc, #216]	; (8001100 <fsm_mode+0x1d8>)
 8001028:	221f      	movs	r2, #31
 800102a:	601a      	str	r2, [r3, #0]
		if(IsButtonPress(0) == 1){
 800102c:	2000      	movs	r0, #0
 800102e:	f7ff f88d 	bl	800014c <IsButtonPress>
 8001032:	4603      	mov	r3, r0
 8001034:	2b01      	cmp	r3, #1
 8001036:	d102      	bne.n	800103e <fsm_mode+0x116>
			status_mode = MODE4;
 8001038:	4b2d      	ldr	r3, [pc, #180]	; (80010f0 <fsm_mode+0x1c8>)
 800103a:	2204      	movs	r2, #4
 800103c:	601a      	str	r2, [r3, #0]
		}
		if(IsButtonPress(1) == 1){
 800103e:	2001      	movs	r0, #1
 8001040:	f7ff f884 	bl	800014c <IsButtonPress>
 8001044:	4603      	mov	r3, r0
 8001046:	2b01      	cmp	r3, #1
 8001048:	d104      	bne.n	8001054 <fsm_mode+0x12c>
			// add value
			countTemp+=1;
 800104a:	4b34      	ldr	r3, [pc, #208]	; (800111c <fsm_mode+0x1f4>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	3301      	adds	r3, #1
 8001050:	4a32      	ldr	r2, [pc, #200]	; (800111c <fsm_mode+0x1f4>)
 8001052:	6013      	str	r3, [r2, #0]
		}
		if(IsButtonPress(2) == 1){
 8001054:	2002      	movs	r0, #2
 8001056:	f7ff f879 	bl	800014c <IsButtonPress>
 800105a:	4603      	mov	r3, r0
 800105c:	2b01      	cmp	r3, #1
 800105e:	d141      	bne.n	80010e4 <fsm_mode+0x1bc>
			//set value
			YELLOW_Timer = YELLOW_Timer + countTemp;
 8001060:	4b2f      	ldr	r3, [pc, #188]	; (8001120 <fsm_mode+0x1f8>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b2d      	ldr	r3, [pc, #180]	; (800111c <fsm_mode+0x1f4>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4413      	add	r3, r2
 800106a:	4a2d      	ldr	r2, [pc, #180]	; (8001120 <fsm_mode+0x1f8>)
 800106c:	6013      	str	r3, [r2, #0]
			countTemp=0;
 800106e:	4b2b      	ldr	r3, [pc, #172]	; (800111c <fsm_mode+0x1f4>)
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
		}
		break;
 8001074:	e036      	b.n	80010e4 <fsm_mode+0x1bc>
	case MODE4:
		status_A = MAN_GREEN;
 8001076:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <fsm_mode+0x1cc>)
 8001078:	2218      	movs	r2, #24
 800107a:	601a      	str	r2, [r3, #0]
		status_B = MAN_GREEN;
 800107c:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <fsm_mode+0x1d0>)
 800107e:	2218      	movs	r2, #24
 8001080:	601a      	str	r2, [r3, #0]
		fsm_status_A = FSM_MAN;
 8001082:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <fsm_mode+0x1d4>)
 8001084:	221f      	movs	r2, #31
 8001086:	601a      	str	r2, [r3, #0]
		fsm_status_B = FSM_MAN;
 8001088:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <fsm_mode+0x1d8>)
 800108a:	221f      	movs	r2, #31
 800108c:	601a      	str	r2, [r3, #0]
		if(IsButtonPress(0) == 1){
 800108e:	2000      	movs	r0, #0
 8001090:	f7ff f85c 	bl	800014c <IsButtonPress>
 8001094:	4603      	mov	r3, r0
 8001096:	2b01      	cmp	r3, #1
 8001098:	d102      	bne.n	80010a0 <fsm_mode+0x178>
			status_mode = MODE0;
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <fsm_mode+0x1c8>)
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
		}
		if(IsButtonPress(1) == 1){
 80010a0:	2001      	movs	r0, #1
 80010a2:	f7ff f853 	bl	800014c <IsButtonPress>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d104      	bne.n	80010b6 <fsm_mode+0x18e>
			// add value
			countTemp+=1;
 80010ac:	4b1b      	ldr	r3, [pc, #108]	; (800111c <fsm_mode+0x1f4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	3301      	adds	r3, #1
 80010b2:	4a1a      	ldr	r2, [pc, #104]	; (800111c <fsm_mode+0x1f4>)
 80010b4:	6013      	str	r3, [r2, #0]
		}
		if(IsButtonPress(2) == 1){
 80010b6:	2002      	movs	r0, #2
 80010b8:	f7ff f848 	bl	800014c <IsButtonPress>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d112      	bne.n	80010e8 <fsm_mode+0x1c0>
			//set value
			GREEN_Timer = GREEN_Timer + countTemp;
 80010c2:	4b12      	ldr	r3, [pc, #72]	; (800110c <fsm_mode+0x1e4>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <fsm_mode+0x1f4>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a0f      	ldr	r2, [pc, #60]	; (800110c <fsm_mode+0x1e4>)
 80010ce:	6013      	str	r3, [r2, #0]
			countTemp=0;
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <fsm_mode+0x1f4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
		}
		break;
 80010d6:	e007      	b.n	80010e8 <fsm_mode+0x1c0>
	default:
		break;
 80010d8:	bf00      	nop
 80010da:	e006      	b.n	80010ea <fsm_mode+0x1c2>
		break;
 80010dc:	bf00      	nop
 80010de:	e004      	b.n	80010ea <fsm_mode+0x1c2>
		break;
 80010e0:	bf00      	nop
 80010e2:	e002      	b.n	80010ea <fsm_mode+0x1c2>
		break;
 80010e4:	bf00      	nop
 80010e6:	e000      	b.n	80010ea <fsm_mode+0x1c2>
		break;
 80010e8:	bf00      	nop
	}
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200000c8 	.word	0x200000c8
 80010f4:	20000080 	.word	0x20000080
 80010f8:	20000084 	.word	0x20000084
 80010fc:	20000078 	.word	0x20000078
 8001100:	2000007c 	.word	0x2000007c
 8001104:	2000006c 	.word	0x2000006c
 8001108:	200000d0 	.word	0x200000d0
 800110c:	20000074 	.word	0x20000074
 8001110:	200000d8 	.word	0x200000d8
 8001114:	200000d4 	.word	0x200000d4
 8001118:	200000f0 	.word	0x200000f0
 800111c:	200000c4 	.word	0x200000c4
 8001120:	20000070 	.word	0x20000070

08001124 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001128:	f000 fb9a 	bl	8001860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800112c:	f000 f83c 	bl	80011a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001130:	f000 f8c2 	bl	80012b8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001134:	f000 f874 	bl	8001220 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8001138:	4814      	ldr	r0, [pc, #80]	; (800118c <main+0x68>)
 800113a:	f001 faef 	bl	800271c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	SCH_Init();
 800113e:	f000 f949 	bl	80013d4 <SCH_Init>
	SCH_Add_Task(timer_red, 0, 1000);
 8001142:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001146:	2100      	movs	r1, #0
 8001148:	4811      	ldr	r0, [pc, #68]	; (8001190 <main+0x6c>)
 800114a:	f000 f95d 	bl	8001408 <SCH_Add_Task>
	SCH_Add_Task(getKeyInput, 0, 10);
 800114e:	220a      	movs	r2, #10
 8001150:	2100      	movs	r1, #0
 8001152:	4810      	ldr	r0, [pc, #64]	; (8001194 <main+0x70>)
 8001154:	f000 f958 	bl	8001408 <SCH_Add_Task>


	SCH_Add_Task(update_switch, 0, 250);
 8001158:	22fa      	movs	r2, #250	; 0xfa
 800115a:	2100      	movs	r1, #0
 800115c:	480e      	ldr	r0, [pc, #56]	; (8001198 <main+0x74>)
 800115e:	f000 f953 	bl	8001408 <SCH_Add_Task>
	SCH_Add_Task(display_fsm_7seg, 0, 200);
 8001162:	22c8      	movs	r2, #200	; 0xc8
 8001164:	2100      	movs	r1, #0
 8001166:	480d      	ldr	r0, [pc, #52]	; (800119c <main+0x78>)
 8001168:	f000 f94e 	bl	8001408 <SCH_Add_Task>


	SCH_Add_Task(fsm_7seg_run, 0, 1000);
 800116c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001170:	2100      	movs	r1, #0
 8001172:	480b      	ldr	r0, [pc, #44]	; (80011a0 <main+0x7c>)
 8001174:	f000 f948 	bl	8001408 <SCH_Add_Task>
	SCH_Add_Task(fsm_mode, 0, 1000);
 8001178:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800117c:	2100      	movs	r1, #0
 800117e:	4809      	ldr	r0, [pc, #36]	; (80011a4 <main+0x80>)
 8001180:	f000 f942 	bl	8001408 <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch_Tasks();
 8001184:	f000 fa00 	bl	8001588 <SCH_Dispatch_Tasks>
 8001188:	e7fc      	b.n	8001184 <main+0x60>
 800118a:	bf00      	nop
 800118c:	20000118 	.word	0x20000118
 8001190:	08001801 	.word	0x08001801
 8001194:	080001f9 	.word	0x080001f9
 8001198:	08000301 	.word	0x08000301
 800119c:	08000c09 	.word	0x08000c09
 80011a0:	08000bf9 	.word	0x08000bf9
 80011a4:	08000f29 	.word	0x08000f29

080011a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b090      	sub	sp, #64	; 0x40
 80011ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ae:	f107 0318 	add.w	r3, r7, #24
 80011b2:	2228      	movs	r2, #40	; 0x28
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f001 fe60 	bl	8002e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ca:	2302      	movs	r3, #2
 80011cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ce:	2301      	movs	r3, #1
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011d2:	2310      	movs	r3, #16
 80011d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011da:	f107 0318 	add.w	r3, r7, #24
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 fe70 	bl	8001ec4 <HAL_RCC_OscConfig>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SystemClock_Config+0x46>
  {
    Error_Handler();
 80011ea:	f000 f8ed 	bl	80013c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ee:	230f      	movs	r3, #15
 80011f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f001 f8dc 	bl	80023c4 <HAL_RCC_ClockConfig>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001212:	f000 f8d9 	bl	80013c8 <Error_Handler>
  }
}
 8001216:	bf00      	nop
 8001218:	3740      	adds	r7, #64	; 0x40
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001226:	f107 0308 	add.w	r3, r7, #8
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001234:	463b      	mov	r3, r7
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800123c:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <MX_TIM2_Init+0x94>)
 800123e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001242:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001244:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <MX_TIM2_Init+0x94>)
 8001246:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800124a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <MX_TIM2_Init+0x94>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <MX_TIM2_Init+0x94>)
 8001254:	2209      	movs	r2, #9
 8001256:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001258:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <MX_TIM2_Init+0x94>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <MX_TIM2_Init+0x94>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001264:	4813      	ldr	r0, [pc, #76]	; (80012b4 <MX_TIM2_Init+0x94>)
 8001266:	f001 fa09 	bl	800267c <HAL_TIM_Base_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001270:	f000 f8aa 	bl	80013c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001278:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800127a:	f107 0308 	add.w	r3, r7, #8
 800127e:	4619      	mov	r1, r3
 8001280:	480c      	ldr	r0, [pc, #48]	; (80012b4 <MX_TIM2_Init+0x94>)
 8001282:	f001 fb87 	bl	8002994 <HAL_TIM_ConfigClockSource>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800128c:	f000 f89c 	bl	80013c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001290:	2300      	movs	r3, #0
 8001292:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001298:	463b      	mov	r3, r7
 800129a:	4619      	mov	r1, r3
 800129c:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_TIM2_Init+0x94>)
 800129e:	f001 fd5f 	bl	8002d60 <HAL_TIMEx_MasterConfigSynchronization>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012a8:	f000 f88e 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012ac:	bf00      	nop
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000118 	.word	0x20000118

080012b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012be:	f107 0310 	add.w	r3, r7, #16
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012cc:	4b35      	ldr	r3, [pc, #212]	; (80013a4 <MX_GPIO_Init+0xec>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	4a34      	ldr	r2, [pc, #208]	; (80013a4 <MX_GPIO_Init+0xec>)
 80012d2:	f043 0310 	orr.w	r3, r3, #16
 80012d6:	6193      	str	r3, [r2, #24]
 80012d8:	4b32      	ldr	r3, [pc, #200]	; (80013a4 <MX_GPIO_Init+0xec>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	f003 0310 	and.w	r3, r3, #16
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e4:	4b2f      	ldr	r3, [pc, #188]	; (80013a4 <MX_GPIO_Init+0xec>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	4a2e      	ldr	r2, [pc, #184]	; (80013a4 <MX_GPIO_Init+0xec>)
 80012ea:	f043 0304 	orr.w	r3, r3, #4
 80012ee:	6193      	str	r3, [r2, #24]
 80012f0:	4b2c      	ldr	r3, [pc, #176]	; (80013a4 <MX_GPIO_Init+0xec>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	f003 0304 	and.w	r3, r3, #4
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fc:	4b29      	ldr	r3, [pc, #164]	; (80013a4 <MX_GPIO_Init+0xec>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	4a28      	ldr	r2, [pc, #160]	; (80013a4 <MX_GPIO_Init+0xec>)
 8001302:	f043 0308 	orr.w	r3, r3, #8
 8001306:	6193      	str	r3, [r2, #24]
 8001308:	4b26      	ldr	r3, [pc, #152]	; (80013a4 <MX_GPIO_Init+0xec>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	f003 0308 	and.w	r3, r3, #8
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA3_Pin|PA4_Pin|PA5_Pin|PA6_Pin
 8001314:	2200      	movs	r2, #0
 8001316:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 800131a:	4823      	ldr	r0, [pc, #140]	; (80013a8 <MX_GPIO_Init+0xf0>)
 800131c:	f000 fda1 	bl	8001e62 <HAL_GPIO_WritePin>
                          |PA7_Pin|PA8_Pin|PA9_Pin|PA10_Pin
                          |PA11_Pin|PA12_Pin|PA13_Pin|PA14_Pin
                          |PA15_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PB0_Pin|PB1_Pin|PB2_Pin|PB10_Pin
 8001320:	2200      	movs	r2, #0
 8001322:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001326:	4821      	ldr	r0, [pc, #132]	; (80013ac <MX_GPIO_Init+0xf4>)
 8001328:	f000 fd9b 	bl	8001e62 <HAL_GPIO_WritePin>
                          |PB11_Pin|PB12_Pin|PB13_Pin|PB14_Pin
                          |PB15_Pin|PB3_Pin|PB4_Pin|PB5_Pin
                          |PB6_Pin|PB7_Pin|PB8_Pin|PB9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin;
 800132c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001330:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001336:	2301      	movs	r3, #1
 8001338:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON0_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 0310 	add.w	r3, r7, #16
 800133e:	4619      	mov	r1, r3
 8001340:	481b      	ldr	r0, [pc, #108]	; (80013b0 <MX_GPIO_Init+0xf8>)
 8001342:	f000 fbfd 	bl	8001b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0_Pin PA1_Pin PA2_Pin */
  GPIO_InitStruct.Pin = PA0_Pin|PA1_Pin|PA2_Pin;
 8001346:	2307      	movs	r3, #7
 8001348:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800134e:	2301      	movs	r3, #1
 8001350:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 0310 	add.w	r3, r7, #16
 8001356:	4619      	mov	r1, r3
 8001358:	4813      	ldr	r0, [pc, #76]	; (80013a8 <MX_GPIO_Init+0xf0>)
 800135a:	f000 fbf1 	bl	8001b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3_Pin PA4_Pin PA5_Pin PA6_Pin
                           PA7_Pin PA8_Pin PA9_Pin PA10_Pin
                           PA11_Pin PA12_Pin PA13_Pin PA14_Pin
                           PA15_Pin */
  GPIO_InitStruct.Pin = PA3_Pin|PA4_Pin|PA5_Pin|PA6_Pin
 800135e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001362:	613b      	str	r3, [r7, #16]
                          |PA7_Pin|PA8_Pin|PA9_Pin|PA10_Pin
                          |PA11_Pin|PA12_Pin|PA13_Pin|PA14_Pin
                          |PA15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001364:	2301      	movs	r3, #1
 8001366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2302      	movs	r3, #2
 800136e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	4619      	mov	r1, r3
 8001376:	480c      	ldr	r0, [pc, #48]	; (80013a8 <MX_GPIO_Init+0xf0>)
 8001378:	f000 fbe2 	bl	8001b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0_Pin PB1_Pin PB2_Pin PB10_Pin
                           PB11_Pin PB12_Pin PB13_Pin PB14_Pin
                           PB15_Pin PB3_Pin PB4_Pin PB5_Pin
                           PB6_Pin PB7_Pin PB8_Pin PB9_Pin */
  GPIO_InitStruct.Pin = PB0_Pin|PB1_Pin|PB2_Pin|PB10_Pin
 800137c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001380:	613b      	str	r3, [r7, #16]
                          |PB11_Pin|PB12_Pin|PB13_Pin|PB14_Pin
                          |PB15_Pin|PB3_Pin|PB4_Pin|PB5_Pin
                          |PB6_Pin|PB7_Pin|PB8_Pin|PB9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2302      	movs	r3, #2
 800138c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138e:	f107 0310 	add.w	r3, r7, #16
 8001392:	4619      	mov	r1, r3
 8001394:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_GPIO_Init+0xf4>)
 8001396:	f000 fbd3 	bl	8001b40 <HAL_GPIO_Init>

}
 800139a:	bf00      	nop
 800139c:	3720      	adds	r7, #32
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40010800 	.word	0x40010800
 80013ac:	40010c00 	.word	0x40010c00
 80013b0:	40011000 	.word	0x40011000

080013b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
SCH_Update();
 80013bc:	f000 f884 	bl	80014c8 <SCH_Update>

}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013cc:	b672      	cpsid	i
}
 80013ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <Error_Handler+0x8>
	...

080013d4 <SCH_Init>:
#define TICK 10

sTask SCH_tasks_G[SCH_MAX_TASK];
uint8_t current_index_task = 0;

void SCH_Init(void) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
	for(int i=0;i<current_index_task;i++){
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	e006      	b.n	80013ee <SCH_Init+0x1a>
		SCH_Delete(i);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 f920 	bl	8001628 <SCH_Delete>
	for(int i=0;i<current_index_task;i++){
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3301      	adds	r3, #1
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	4b05      	ldr	r3, [pc, #20]	; (8001404 <SCH_Init+0x30>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	461a      	mov	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4293      	cmp	r3, r2
 80013f8:	dbf2      	blt.n	80013e0 <SCH_Init+0xc>
	}
}
 80013fa:	bf00      	nop
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	200000cc 	.word	0x200000cc

08001408 <SCH_Add_Task>:

void SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
	if (current_index_task < SCH_MAX_TASK) {
 8001414:	4b29      	ldr	r3, [pc, #164]	; (80014bc <SCH_Add_Task+0xb4>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b27      	cmp	r3, #39	; 0x27
 800141a:	d84a      	bhi.n	80014b2 <SCH_Add_Task+0xaa>
		SCH_tasks_G[current_index_task].pTask = pFunction;
 800141c:	4b27      	ldr	r3, [pc, #156]	; (80014bc <SCH_Add_Task+0xb4>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4619      	mov	r1, r3
 8001422:	4a27      	ldr	r2, [pc, #156]	; (80014c0 <SCH_Add_Task+0xb8>)
 8001424:	460b      	mov	r3, r1
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	440b      	add	r3, r1
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY / TICK;
 8001432:	4b22      	ldr	r3, [pc, #136]	; (80014bc <SCH_Add_Task+0xb4>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	4a22      	ldr	r2, [pc, #136]	; (80014c4 <SCH_Add_Task+0xbc>)
 800143c:	fba2 2303 	umull	r2, r3, r2, r3
 8001440:	08da      	lsrs	r2, r3, #3
 8001442:	491f      	ldr	r1, [pc, #124]	; (80014c0 <SCH_Add_Task+0xb8>)
 8001444:	4603      	mov	r3, r0
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4403      	add	r3, r0
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	440b      	add	r3, r1
 800144e:	3304      	adds	r3, #4
 8001450:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period = PERIOD / TICK;
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <SCH_Add_Task+0xb4>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a1a      	ldr	r2, [pc, #104]	; (80014c4 <SCH_Add_Task+0xbc>)
 800145c:	fba2 2303 	umull	r2, r3, r2, r3
 8001460:	08da      	lsrs	r2, r3, #3
 8001462:	4917      	ldr	r1, [pc, #92]	; (80014c0 <SCH_Add_Task+0xb8>)
 8001464:	4603      	mov	r3, r0
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4403      	add	r3, r0
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	3308      	adds	r3, #8
 8001470:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <SCH_Add_Task+0xb4>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	4619      	mov	r1, r3
 8001478:	4a11      	ldr	r2, [pc, #68]	; (80014c0 <SCH_Add_Task+0xb8>)
 800147a:	460b      	mov	r3, r1
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	440b      	add	r3, r1
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	330c      	adds	r3, #12
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]

		SCH_tasks_G[current_index_task].TaskID = current_index_task;
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <SCH_Add_Task+0xb4>)
 800148c:	781a      	ldrb	r2, [r3, #0]
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <SCH_Add_Task+0xb4>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	4619      	mov	r1, r3
 8001494:	4610      	mov	r0, r2
 8001496:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <SCH_Add_Task+0xb8>)
 8001498:	460b      	mov	r3, r1
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	3310      	adds	r3, #16
 80014a4:	6018      	str	r0, [r3, #0]
		current_index_task++;
 80014a6:	4b05      	ldr	r3, [pc, #20]	; (80014bc <SCH_Add_Task+0xb4>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	3301      	adds	r3, #1
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4b03      	ldr	r3, [pc, #12]	; (80014bc <SCH_Add_Task+0xb4>)
 80014b0:	701a      	strb	r2, [r3, #0]
	}
}
 80014b2:	bf00      	nop
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	200000cc 	.word	0x200000cc
 80014c0:	20000160 	.word	0x20000160
 80014c4:	cccccccd 	.word	0xcccccccd

080014c8 <SCH_Update>:
void SCH_Update(void) {
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
	for (int i = 0; i < current_index_task; i++) {
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	e048      	b.n	8001566 <SCH_Update+0x9e>
		if (SCH_tasks_G[i].Delay > 0) {
 80014d4:	492a      	ldr	r1, [pc, #168]	; (8001580 <SCH_Update+0xb8>)
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	4613      	mov	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	440b      	add	r3, r1
 80014e2:	3304      	adds	r3, #4
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d013      	beq.n	8001512 <SCH_Update+0x4a>
			SCH_tasks_G[i].Delay--;
 80014ea:	4925      	ldr	r1, [pc, #148]	; (8001580 <SCH_Update+0xb8>)
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	440b      	add	r3, r1
 80014f8:	3304      	adds	r3, #4
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	1e59      	subs	r1, r3, #1
 80014fe:	4820      	ldr	r0, [pc, #128]	; (8001580 <SCH_Update+0xb8>)
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4403      	add	r3, r0
 800150c:	3304      	adds	r3, #4
 800150e:	6019      	str	r1, [r3, #0]
 8001510:	e026      	b.n	8001560 <SCH_Update+0x98>
		} else {
			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 8001512:	491b      	ldr	r1, [pc, #108]	; (8001580 <SCH_Update+0xb8>)
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	440b      	add	r3, r1
 8001520:	3308      	adds	r3, #8
 8001522:	6819      	ldr	r1, [r3, #0]
 8001524:	4816      	ldr	r0, [pc, #88]	; (8001580 <SCH_Update+0xb8>)
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4403      	add	r3, r0
 8001532:	3304      	adds	r3, #4
 8001534:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe += 1;
 8001536:	4912      	ldr	r1, [pc, #72]	; (8001580 <SCH_Update+0xb8>)
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	330c      	adds	r3, #12
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	3301      	adds	r3, #1
 800154a:	b2d8      	uxtb	r0, r3
 800154c:	490c      	ldr	r1, [pc, #48]	; (8001580 <SCH_Update+0xb8>)
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	330c      	adds	r3, #12
 800155c:	4602      	mov	r2, r0
 800155e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < current_index_task; i++) {
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3301      	adds	r3, #1
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	4b07      	ldr	r3, [pc, #28]	; (8001584 <SCH_Update+0xbc>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4293      	cmp	r3, r2
 8001570:	dbb0      	blt.n	80014d4 <SCH_Update+0xc>
		}
	}
}
 8001572:	bf00      	nop
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000160 	.word	0x20000160
 8001584:	200000cc 	.word	0x200000cc

08001588 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
	for (int i = 0; i < current_index_task; i++) {
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	e03a      	b.n	800160a <SCH_Dispatch_Tasks+0x82>
		if (SCH_tasks_G[i].RunMe > 0) {
 8001594:	4922      	ldr	r1, [pc, #136]	; (8001620 <SCH_Dispatch_Tasks+0x98>)
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	330c      	adds	r3, #12
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d02c      	beq.n	8001604 <SCH_Dispatch_Tasks+0x7c>
			SCH_tasks_G[i].RunMe--;
 80015aa:	491d      	ldr	r1, [pc, #116]	; (8001620 <SCH_Dispatch_Tasks+0x98>)
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	330c      	adds	r3, #12
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	3b01      	subs	r3, #1
 80015be:	b2d8      	uxtb	r0, r3
 80015c0:	4917      	ldr	r1, [pc, #92]	; (8001620 <SCH_Dispatch_Tasks+0x98>)
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	330c      	adds	r3, #12
 80015d0:	4602      	mov	r2, r0
 80015d2:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[i].pTask)();
 80015d4:	4912      	ldr	r1, [pc, #72]	; (8001620 <SCH_Dispatch_Tasks+0x98>)
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	4613      	mov	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4798      	blx	r3
			if(SCH_tasks_G[i].Period == 0){
 80015e6:	490e      	ldr	r1, [pc, #56]	; (8001620 <SCH_Dispatch_Tasks+0x98>)
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	440b      	add	r3, r1
 80015f4:	3308      	adds	r3, #8
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d103      	bne.n	8001604 <SCH_Dispatch_Tasks+0x7c>
				SCH_Delete(i);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f812 	bl	8001628 <SCH_Delete>
	for (int i = 0; i < current_index_task; i++) {
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3301      	adds	r3, #1
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <SCH_Dispatch_Tasks+0x9c>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4293      	cmp	r3, r2
 8001614:	dbbe      	blt.n	8001594 <SCH_Dispatch_Tasks+0xc>
			}
		}

	}
}
 8001616:	bf00      	nop
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000160 	.word	0x20000160
 8001624:	200000cc 	.word	0x200000cc

08001628 <SCH_Delete>:

void SCH_Delete(uint32_t ID) {
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	uint32_t i;
	current_index_task--;
 8001630:	4b2a      	ldr	r3, [pc, #168]	; (80016dc <SCH_Delete+0xb4>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	3b01      	subs	r3, #1
 8001636:	b2da      	uxtb	r2, r3
 8001638:	4b28      	ldr	r3, [pc, #160]	; (80016dc <SCH_Delete+0xb4>)
 800163a:	701a      	strb	r2, [r3, #0]
	for ( i = ID; i < SCH_MAX_TASK; i++) {
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	e043      	b.n	80016ca <SCH_Delete+0xa2>
		SCH_tasks_G[i].pTask = SCH_tasks_G[i+1].pTask;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	4926      	ldr	r1, [pc, #152]	; (80016e0 <SCH_Delete+0xb8>)
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	6819      	ldr	r1, [r3, #0]
 8001654:	4822      	ldr	r0, [pc, #136]	; (80016e0 <SCH_Delete+0xb8>)
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4403      	add	r3, r0
 8001662:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[i].Delay = SCH_tasks_G[i+1].Delay ;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	1c5a      	adds	r2, r3, #1
 8001668:	491d      	ldr	r1, [pc, #116]	; (80016e0 <SCH_Delete+0xb8>)
 800166a:	4613      	mov	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	440b      	add	r3, r1
 8001674:	3304      	adds	r3, #4
 8001676:	6819      	ldr	r1, [r3, #0]
 8001678:	4819      	ldr	r0, [pc, #100]	; (80016e0 <SCH_Delete+0xb8>)
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4403      	add	r3, r0
 8001686:	3304      	adds	r3, #4
 8001688:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[i].Period = SCH_tasks_G[i+1].Period ;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	1c5a      	adds	r2, r3, #1
 800168e:	4914      	ldr	r1, [pc, #80]	; (80016e0 <SCH_Delete+0xb8>)
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	3308      	adds	r3, #8
 800169c:	6819      	ldr	r1, [r3, #0]
 800169e:	4810      	ldr	r0, [pc, #64]	; (80016e0 <SCH_Delete+0xb8>)
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4403      	add	r3, r0
 80016ac:	3308      	adds	r3, #8
 80016ae:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[i].RunMe = 0;
 80016b0:	490b      	ldr	r1, [pc, #44]	; (80016e0 <SCH_Delete+0xb8>)
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	330c      	adds	r3, #12
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
	for ( i = ID; i < SCH_MAX_TASK; i++) {
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	3301      	adds	r3, #1
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2b27      	cmp	r3, #39	; 0x27
 80016ce:	d9b8      	bls.n	8001642 <SCH_Delete+0x1a>
	}
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	200000cc 	.word	0x200000cc
 80016e0:	20000160 	.word	0x20000160

080016e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <HAL_MspInit+0x5c>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	4a14      	ldr	r2, [pc, #80]	; (8001740 <HAL_MspInit+0x5c>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6193      	str	r3, [r2, #24]
 80016f6:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_MspInit+0x5c>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_MspInit+0x5c>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <HAL_MspInit+0x5c>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170c:	61d3      	str	r3, [r2, #28]
 800170e:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <HAL_MspInit+0x5c>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_MspInit+0x60>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_MspInit+0x60>)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001736:	bf00      	nop
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	40021000 	.word	0x40021000
 8001744:	40010000 	.word	0x40010000

08001748 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001758:	d113      	bne.n	8001782 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800175a:	4b0c      	ldr	r3, [pc, #48]	; (800178c <HAL_TIM_Base_MspInit+0x44>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	4a0b      	ldr	r2, [pc, #44]	; (800178c <HAL_TIM_Base_MspInit+0x44>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	61d3      	str	r3, [r2, #28]
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_TIM_Base_MspInit+0x44>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	201c      	movs	r0, #28
 8001778:	f000 f9ab 	bl	8001ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800177c:	201c      	movs	r0, #28
 800177e:	f000 f9c4 	bl	8001b0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40021000 	.word	0x40021000

08001790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <NMI_Handler+0x4>

08001796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179a:	e7fe      	b.n	800179a <HardFault_Handler+0x4>

0800179c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <MemManage_Handler+0x4>

080017a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <BusFault_Handler+0x4>

080017a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <UsageFault_Handler+0x4>

080017ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr

080017ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr

080017c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr

080017d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d6:	f000 f889 	bl	80018ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <TIM2_IRQHandler+0x10>)
 80017e6:	f000 ffe5 	bl	80027b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000118 	.word	0x20000118

080017f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <timer_red>:
 *  Created on: Nov 10, 2024
 *      Author: Hy
 */
#include "timer.h"

void timer_red(){
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, PA4_Pin);
 8001804:	2110      	movs	r1, #16
 8001806:	4802      	ldr	r0, [pc, #8]	; (8001810 <timer_red+0x10>)
 8001808:	f000 fb43 	bl	8001e92 <HAL_GPIO_TogglePin>
}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40010800 	.word	0x40010800

08001814 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001814:	f7ff ffee 	bl	80017f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001818:	480b      	ldr	r0, [pc, #44]	; (8001848 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800181a:	490c      	ldr	r1, [pc, #48]	; (800184c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800181c:	4a0c      	ldr	r2, [pc, #48]	; (8001850 <LoopFillZerobss+0x16>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001820:	e002      	b.n	8001828 <LoopCopyDataInit>

08001822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001826:	3304      	adds	r3, #4

08001828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800182c:	d3f9      	bcc.n	8001822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182e:	4a09      	ldr	r2, [pc, #36]	; (8001854 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001830:	4c09      	ldr	r4, [pc, #36]	; (8001858 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001834:	e001      	b.n	800183a <LoopFillZerobss>

08001836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001838:	3204      	adds	r2, #4

0800183a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800183c:	d3fb      	bcc.n	8001836 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800183e:	f001 faf9 	bl	8002e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001842:	f7ff fc6f 	bl	8001124 <main>
  bx lr
 8001846:	4770      	bx	lr
  ldr r0, =_sdata
 8001848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800184c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001850:	08002ed0 	.word	0x08002ed0
  ldr r2, =_sbss
 8001854:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001858:	20000484 	.word	0x20000484

0800185c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800185c:	e7fe      	b.n	800185c <ADC1_2_IRQHandler>
	...

08001860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <HAL_Init+0x28>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a07      	ldr	r2, [pc, #28]	; (8001888 <HAL_Init+0x28>)
 800186a:	f043 0310 	orr.w	r3, r3, #16
 800186e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001870:	2003      	movs	r0, #3
 8001872:	f000 f923 	bl	8001abc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001876:	200f      	movs	r0, #15
 8001878:	f000 f808 	bl	800188c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800187c:	f7ff ff32 	bl	80016e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40022000 	.word	0x40022000

0800188c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_InitTick+0x54>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_InitTick+0x58>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	4619      	mov	r1, r3
 800189e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 f93b 	bl	8001b26 <HAL_SYSTICK_Config>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e00e      	b.n	80018d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b0f      	cmp	r3, #15
 80018be:	d80a      	bhi.n	80018d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c0:	2200      	movs	r2, #0
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	f04f 30ff 	mov.w	r0, #4294967295
 80018c8:	f000 f903 	bl	8001ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018cc:	4a06      	ldr	r2, [pc, #24]	; (80018e8 <HAL_InitTick+0x5c>)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
 80018d4:	e000      	b.n	80018d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000088 	.word	0x20000088
 80018e4:	20000090 	.word	0x20000090
 80018e8:	2000008c 	.word	0x2000008c

080018ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_IncTick+0x1c>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <HAL_IncTick+0x20>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4413      	add	r3, r2
 80018fc:	4a03      	ldr	r2, [pc, #12]	; (800190c <HAL_IncTick+0x20>)
 80018fe:	6013      	str	r3, [r2, #0]
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr
 8001908:	20000090 	.word	0x20000090
 800190c:	20000480 	.word	0x20000480

08001910 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return uwTick;
 8001914:	4b02      	ldr	r3, [pc, #8]	; (8001920 <HAL_GetTick+0x10>)
 8001916:	681b      	ldr	r3, [r3, #0]
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr
 8001920:	20000480 	.word	0x20000480

08001924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <__NVIC_SetPriorityGrouping+0x44>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001940:	4013      	ands	r3, r2
 8001942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800194c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001956:	4a04      	ldr	r2, [pc, #16]	; (8001968 <__NVIC_SetPriorityGrouping+0x44>)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	60d3      	str	r3, [r2, #12]
}
 800195c:	bf00      	nop
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001970:	4b04      	ldr	r3, [pc, #16]	; (8001984 <__NVIC_GetPriorityGrouping+0x18>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	f003 0307 	and.w	r3, r3, #7
}
 800197a:	4618      	mov	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	2b00      	cmp	r3, #0
 8001998:	db0b      	blt.n	80019b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	f003 021f 	and.w	r2, r3, #31
 80019a0:	4906      	ldr	r1, [pc, #24]	; (80019bc <__NVIC_EnableIRQ+0x34>)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	095b      	lsrs	r3, r3, #5
 80019a8:	2001      	movs	r0, #1
 80019aa:	fa00 f202 	lsl.w	r2, r0, r2
 80019ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr
 80019bc:	e000e100 	.word	0xe000e100

080019c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	6039      	str	r1, [r7, #0]
 80019ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	db0a      	blt.n	80019ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	490c      	ldr	r1, [pc, #48]	; (8001a0c <__NVIC_SetPriority+0x4c>)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	0112      	lsls	r2, r2, #4
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	440b      	add	r3, r1
 80019e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e8:	e00a      	b.n	8001a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4908      	ldr	r1, [pc, #32]	; (8001a10 <__NVIC_SetPriority+0x50>)
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	3b04      	subs	r3, #4
 80019f8:	0112      	lsls	r2, r2, #4
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	440b      	add	r3, r1
 80019fe:	761a      	strb	r2, [r3, #24]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000e100 	.word	0xe000e100
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b089      	sub	sp, #36	; 0x24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f1c3 0307 	rsb	r3, r3, #7
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	bf28      	it	cs
 8001a32:	2304      	movcs	r3, #4
 8001a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	2b06      	cmp	r3, #6
 8001a3c:	d902      	bls.n	8001a44 <NVIC_EncodePriority+0x30>
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3b03      	subs	r3, #3
 8001a42:	e000      	b.n	8001a46 <NVIC_EncodePriority+0x32>
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	f04f 32ff 	mov.w	r2, #4294967295
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43da      	mvns	r2, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	401a      	ands	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	fa01 f303 	lsl.w	r3, r1, r3
 8001a66:	43d9      	mvns	r1, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	4313      	orrs	r3, r2
         );
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3724      	adds	r7, #36	; 0x24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a88:	d301      	bcc.n	8001a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e00f      	b.n	8001aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <SysTick_Config+0x40>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a96:	210f      	movs	r1, #15
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9c:	f7ff ff90 	bl	80019c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <SysTick_Config+0x40>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aa6:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <SysTick_Config+0x40>)
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	e000e010 	.word	0xe000e010

08001abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ff2d 	bl	8001924 <__NVIC_SetPriorityGrouping>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b086      	sub	sp, #24
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	4603      	mov	r3, r0
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae4:	f7ff ff42 	bl	800196c <__NVIC_GetPriorityGrouping>
 8001ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	6978      	ldr	r0, [r7, #20]
 8001af0:	f7ff ff90 	bl	8001a14 <NVIC_EncodePriority>
 8001af4:	4602      	mov	r2, r0
 8001af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff5f 	bl	80019c0 <__NVIC_SetPriority>
}
 8001b02:	bf00      	nop
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff35 	bl	8001988 <__NVIC_EnableIRQ>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ffa2 	bl	8001a78 <SysTick_Config>
 8001b34:	4603      	mov	r3, r0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b08b      	sub	sp, #44	; 0x2c
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b52:	e148      	b.n	8001de6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b54:	2201      	movs	r2, #1
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	69fa      	ldr	r2, [r7, #28]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	f040 8137 	bne.w	8001de0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	4aa3      	ldr	r2, [pc, #652]	; (8001e04 <HAL_GPIO_Init+0x2c4>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d05e      	beq.n	8001c3a <HAL_GPIO_Init+0xfa>
 8001b7c:	4aa1      	ldr	r2, [pc, #644]	; (8001e04 <HAL_GPIO_Init+0x2c4>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d875      	bhi.n	8001c6e <HAL_GPIO_Init+0x12e>
 8001b82:	4aa1      	ldr	r2, [pc, #644]	; (8001e08 <HAL_GPIO_Init+0x2c8>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d058      	beq.n	8001c3a <HAL_GPIO_Init+0xfa>
 8001b88:	4a9f      	ldr	r2, [pc, #636]	; (8001e08 <HAL_GPIO_Init+0x2c8>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d86f      	bhi.n	8001c6e <HAL_GPIO_Init+0x12e>
 8001b8e:	4a9f      	ldr	r2, [pc, #636]	; (8001e0c <HAL_GPIO_Init+0x2cc>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d052      	beq.n	8001c3a <HAL_GPIO_Init+0xfa>
 8001b94:	4a9d      	ldr	r2, [pc, #628]	; (8001e0c <HAL_GPIO_Init+0x2cc>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d869      	bhi.n	8001c6e <HAL_GPIO_Init+0x12e>
 8001b9a:	4a9d      	ldr	r2, [pc, #628]	; (8001e10 <HAL_GPIO_Init+0x2d0>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d04c      	beq.n	8001c3a <HAL_GPIO_Init+0xfa>
 8001ba0:	4a9b      	ldr	r2, [pc, #620]	; (8001e10 <HAL_GPIO_Init+0x2d0>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d863      	bhi.n	8001c6e <HAL_GPIO_Init+0x12e>
 8001ba6:	4a9b      	ldr	r2, [pc, #620]	; (8001e14 <HAL_GPIO_Init+0x2d4>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d046      	beq.n	8001c3a <HAL_GPIO_Init+0xfa>
 8001bac:	4a99      	ldr	r2, [pc, #612]	; (8001e14 <HAL_GPIO_Init+0x2d4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d85d      	bhi.n	8001c6e <HAL_GPIO_Init+0x12e>
 8001bb2:	2b12      	cmp	r3, #18
 8001bb4:	d82a      	bhi.n	8001c0c <HAL_GPIO_Init+0xcc>
 8001bb6:	2b12      	cmp	r3, #18
 8001bb8:	d859      	bhi.n	8001c6e <HAL_GPIO_Init+0x12e>
 8001bba:	a201      	add	r2, pc, #4	; (adr r2, 8001bc0 <HAL_GPIO_Init+0x80>)
 8001bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc0:	08001c3b 	.word	0x08001c3b
 8001bc4:	08001c15 	.word	0x08001c15
 8001bc8:	08001c27 	.word	0x08001c27
 8001bcc:	08001c69 	.word	0x08001c69
 8001bd0:	08001c6f 	.word	0x08001c6f
 8001bd4:	08001c6f 	.word	0x08001c6f
 8001bd8:	08001c6f 	.word	0x08001c6f
 8001bdc:	08001c6f 	.word	0x08001c6f
 8001be0:	08001c6f 	.word	0x08001c6f
 8001be4:	08001c6f 	.word	0x08001c6f
 8001be8:	08001c6f 	.word	0x08001c6f
 8001bec:	08001c6f 	.word	0x08001c6f
 8001bf0:	08001c6f 	.word	0x08001c6f
 8001bf4:	08001c6f 	.word	0x08001c6f
 8001bf8:	08001c6f 	.word	0x08001c6f
 8001bfc:	08001c6f 	.word	0x08001c6f
 8001c00:	08001c6f 	.word	0x08001c6f
 8001c04:	08001c1d 	.word	0x08001c1d
 8001c08:	08001c31 	.word	0x08001c31
 8001c0c:	4a82      	ldr	r2, [pc, #520]	; (8001e18 <HAL_GPIO_Init+0x2d8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d013      	beq.n	8001c3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c12:	e02c      	b.n	8001c6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	623b      	str	r3, [r7, #32]
          break;
 8001c1a:	e029      	b.n	8001c70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	3304      	adds	r3, #4
 8001c22:	623b      	str	r3, [r7, #32]
          break;
 8001c24:	e024      	b.n	8001c70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	3308      	adds	r3, #8
 8001c2c:	623b      	str	r3, [r7, #32]
          break;
 8001c2e:	e01f      	b.n	8001c70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	330c      	adds	r3, #12
 8001c36:	623b      	str	r3, [r7, #32]
          break;
 8001c38:	e01a      	b.n	8001c70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d102      	bne.n	8001c48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c42:	2304      	movs	r3, #4
 8001c44:	623b      	str	r3, [r7, #32]
          break;
 8001c46:	e013      	b.n	8001c70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d105      	bne.n	8001c5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c50:	2308      	movs	r3, #8
 8001c52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69fa      	ldr	r2, [r7, #28]
 8001c58:	611a      	str	r2, [r3, #16]
          break;
 8001c5a:	e009      	b.n	8001c70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c5c:	2308      	movs	r3, #8
 8001c5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69fa      	ldr	r2, [r7, #28]
 8001c64:	615a      	str	r2, [r3, #20]
          break;
 8001c66:	e003      	b.n	8001c70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	623b      	str	r3, [r7, #32]
          break;
 8001c6c:	e000      	b.n	8001c70 <HAL_GPIO_Init+0x130>
          break;
 8001c6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	2bff      	cmp	r3, #255	; 0xff
 8001c74:	d801      	bhi.n	8001c7a <HAL_GPIO_Init+0x13a>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	e001      	b.n	8001c7e <HAL_GPIO_Init+0x13e>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	2bff      	cmp	r3, #255	; 0xff
 8001c84:	d802      	bhi.n	8001c8c <HAL_GPIO_Init+0x14c>
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	e002      	b.n	8001c92 <HAL_GPIO_Init+0x152>
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	3b08      	subs	r3, #8
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	210f      	movs	r1, #15
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	6a39      	ldr	r1, [r7, #32]
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cac:	431a      	orrs	r2, r3
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 8090 	beq.w	8001de0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cc0:	4b56      	ldr	r3, [pc, #344]	; (8001e1c <HAL_GPIO_Init+0x2dc>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	4a55      	ldr	r2, [pc, #340]	; (8001e1c <HAL_GPIO_Init+0x2dc>)
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	6193      	str	r3, [r2, #24]
 8001ccc:	4b53      	ldr	r3, [pc, #332]	; (8001e1c <HAL_GPIO_Init+0x2dc>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cd8:	4a51      	ldr	r2, [pc, #324]	; (8001e20 <HAL_GPIO_Init+0x2e0>)
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	089b      	lsrs	r3, r3, #2
 8001cde:	3302      	adds	r3, #2
 8001ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	220f      	movs	r2, #15
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a49      	ldr	r2, [pc, #292]	; (8001e24 <HAL_GPIO_Init+0x2e4>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d00d      	beq.n	8001d20 <HAL_GPIO_Init+0x1e0>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a48      	ldr	r2, [pc, #288]	; (8001e28 <HAL_GPIO_Init+0x2e8>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d007      	beq.n	8001d1c <HAL_GPIO_Init+0x1dc>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a47      	ldr	r2, [pc, #284]	; (8001e2c <HAL_GPIO_Init+0x2ec>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d101      	bne.n	8001d18 <HAL_GPIO_Init+0x1d8>
 8001d14:	2302      	movs	r3, #2
 8001d16:	e004      	b.n	8001d22 <HAL_GPIO_Init+0x1e2>
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e002      	b.n	8001d22 <HAL_GPIO_Init+0x1e2>
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e000      	b.n	8001d22 <HAL_GPIO_Init+0x1e2>
 8001d20:	2300      	movs	r3, #0
 8001d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d24:	f002 0203 	and.w	r2, r2, #3
 8001d28:	0092      	lsls	r2, r2, #2
 8001d2a:	4093      	lsls	r3, r2
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d32:	493b      	ldr	r1, [pc, #236]	; (8001e20 <HAL_GPIO_Init+0x2e0>)
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	089b      	lsrs	r3, r3, #2
 8001d38:	3302      	adds	r3, #2
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d006      	beq.n	8001d5a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d4c:	4b38      	ldr	r3, [pc, #224]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	4937      	ldr	r1, [pc, #220]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	608b      	str	r3, [r1, #8]
 8001d58:	e006      	b.n	8001d68 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d5a:	4b35      	ldr	r3, [pc, #212]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	4933      	ldr	r1, [pc, #204]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d006      	beq.n	8001d82 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d74:	4b2e      	ldr	r3, [pc, #184]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	492d      	ldr	r1, [pc, #180]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	60cb      	str	r3, [r1, #12]
 8001d80:	e006      	b.n	8001d90 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d82:	4b2b      	ldr	r3, [pc, #172]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	4929      	ldr	r1, [pc, #164]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d006      	beq.n	8001daa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d9c:	4b24      	ldr	r3, [pc, #144]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	4923      	ldr	r1, [pc, #140]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]
 8001da8:	e006      	b.n	8001db8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001daa:	4b21      	ldr	r3, [pc, #132]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	491f      	ldr	r1, [pc, #124]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d006      	beq.n	8001dd2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001dc4:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4919      	ldr	r1, [pc, #100]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	600b      	str	r3, [r1, #0]
 8001dd0:	e006      	b.n	8001de0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dd2:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	4915      	ldr	r1, [pc, #84]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	3301      	adds	r3, #1
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f47f aeaf 	bne.w	8001b54 <HAL_GPIO_Init+0x14>
  }
}
 8001df6:	bf00      	nop
 8001df8:	bf00      	nop
 8001dfa:	372c      	adds	r7, #44	; 0x2c
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	10320000 	.word	0x10320000
 8001e08:	10310000 	.word	0x10310000
 8001e0c:	10220000 	.word	0x10220000
 8001e10:	10210000 	.word	0x10210000
 8001e14:	10120000 	.word	0x10120000
 8001e18:	10110000 	.word	0x10110000
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40010000 	.word	0x40010000
 8001e24:	40010800 	.word	0x40010800
 8001e28:	40010c00 	.word	0x40010c00
 8001e2c:	40011000 	.word	0x40011000
 8001e30:	40010400 	.word	0x40010400

08001e34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	887b      	ldrh	r3, [r7, #2]
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d002      	beq.n	8001e52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	73fb      	strb	r3, [r7, #15]
 8001e50:	e001      	b.n	8001e56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e52:	2300      	movs	r3, #0
 8001e54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr

08001e62 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	807b      	strh	r3, [r7, #2]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e72:	787b      	ldrb	r3, [r7, #1]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e78:	887a      	ldrh	r2, [r7, #2]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e7e:	e003      	b.n	8001e88 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e80:	887b      	ldrh	r3, [r7, #2]
 8001e82:	041a      	lsls	r2, r3, #16
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	611a      	str	r2, [r3, #16]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr

08001e92 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b085      	sub	sp, #20
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ea4:	887a      	ldrh	r2, [r7, #2]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	041a      	lsls	r2, r3, #16
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	43d9      	mvns	r1, r3
 8001eb0:	887b      	ldrh	r3, [r7, #2]
 8001eb2:	400b      	ands	r3, r1
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	611a      	str	r2, [r3, #16]
}
 8001eba:	bf00      	nop
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e26c      	b.n	80023b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 8087 	beq.w	8001ff2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ee4:	4b92      	ldr	r3, [pc, #584]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 030c 	and.w	r3, r3, #12
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d00c      	beq.n	8001f0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ef0:	4b8f      	ldr	r3, [pc, #572]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d112      	bne.n	8001f22 <HAL_RCC_OscConfig+0x5e>
 8001efc:	4b8c      	ldr	r3, [pc, #560]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f08:	d10b      	bne.n	8001f22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f0a:	4b89      	ldr	r3, [pc, #548]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d06c      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x12c>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d168      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e246      	b.n	80023b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f2a:	d106      	bne.n	8001f3a <HAL_RCC_OscConfig+0x76>
 8001f2c:	4b80      	ldr	r3, [pc, #512]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a7f      	ldr	r2, [pc, #508]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f36:	6013      	str	r3, [r2, #0]
 8001f38:	e02e      	b.n	8001f98 <HAL_RCC_OscConfig+0xd4>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10c      	bne.n	8001f5c <HAL_RCC_OscConfig+0x98>
 8001f42:	4b7b      	ldr	r3, [pc, #492]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a7a      	ldr	r2, [pc, #488]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	4b78      	ldr	r3, [pc, #480]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a77      	ldr	r2, [pc, #476]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	e01d      	b.n	8001f98 <HAL_RCC_OscConfig+0xd4>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f64:	d10c      	bne.n	8001f80 <HAL_RCC_OscConfig+0xbc>
 8001f66:	4b72      	ldr	r3, [pc, #456]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a71      	ldr	r2, [pc, #452]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	4b6f      	ldr	r3, [pc, #444]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a6e      	ldr	r2, [pc, #440]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	e00b      	b.n	8001f98 <HAL_RCC_OscConfig+0xd4>
 8001f80:	4b6b      	ldr	r3, [pc, #428]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a6a      	ldr	r2, [pc, #424]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	4b68      	ldr	r3, [pc, #416]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a67      	ldr	r2, [pc, #412]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d013      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa0:	f7ff fcb6 	bl	8001910 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa8:	f7ff fcb2 	bl	8001910 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b64      	cmp	r3, #100	; 0x64
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e1fa      	b.n	80023b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fba:	4b5d      	ldr	r3, [pc, #372]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0xe4>
 8001fc6:	e014      	b.n	8001ff2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc8:	f7ff fca2 	bl	8001910 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd0:	f7ff fc9e 	bl	8001910 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b64      	cmp	r3, #100	; 0x64
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e1e6      	b.n	80023b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe2:	4b53      	ldr	r3, [pc, #332]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x10c>
 8001fee:	e000      	b.n	8001ff2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d063      	beq.n	80020c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ffe:	4b4c      	ldr	r3, [pc, #304]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 030c 	and.w	r3, r3, #12
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00b      	beq.n	8002022 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800200a:	4b49      	ldr	r3, [pc, #292]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 030c 	and.w	r3, r3, #12
 8002012:	2b08      	cmp	r3, #8
 8002014:	d11c      	bne.n	8002050 <HAL_RCC_OscConfig+0x18c>
 8002016:	4b46      	ldr	r3, [pc, #280]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d116      	bne.n	8002050 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002022:	4b43      	ldr	r3, [pc, #268]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d005      	beq.n	800203a <HAL_RCC_OscConfig+0x176>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d001      	beq.n	800203a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e1ba      	b.n	80023b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203a:	4b3d      	ldr	r3, [pc, #244]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	4939      	ldr	r1, [pc, #228]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 800204a:	4313      	orrs	r3, r2
 800204c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204e:	e03a      	b.n	80020c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d020      	beq.n	800209a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002058:	4b36      	ldr	r3, [pc, #216]	; (8002134 <HAL_RCC_OscConfig+0x270>)
 800205a:	2201      	movs	r2, #1
 800205c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205e:	f7ff fc57 	bl	8001910 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002066:	f7ff fc53 	bl	8001910 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e19b      	b.n	80023b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002078:	4b2d      	ldr	r3, [pc, #180]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0f0      	beq.n	8002066 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002084:	4b2a      	ldr	r3, [pc, #168]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4927      	ldr	r1, [pc, #156]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 8002094:	4313      	orrs	r3, r2
 8002096:	600b      	str	r3, [r1, #0]
 8002098:	e015      	b.n	80020c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800209a:	4b26      	ldr	r3, [pc, #152]	; (8002134 <HAL_RCC_OscConfig+0x270>)
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a0:	f7ff fc36 	bl	8001910 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a8:	f7ff fc32 	bl	8001910 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e17a      	b.n	80023b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ba:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f0      	bne.n	80020a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d03a      	beq.n	8002148 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d019      	beq.n	800210e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020da:	4b17      	ldr	r3, [pc, #92]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 80020dc:	2201      	movs	r2, #1
 80020de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e0:	f7ff fc16 	bl	8001910 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e8:	f7ff fc12 	bl	8001910 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e15a      	b.n	80023b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fa:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002106:	2001      	movs	r0, #1
 8002108:	f000 fa9a 	bl	8002640 <RCC_Delay>
 800210c:	e01c      	b.n	8002148 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800210e:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002114:	f7ff fbfc 	bl	8001910 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800211a:	e00f      	b.n	800213c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800211c:	f7ff fbf8 	bl	8001910 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d908      	bls.n	800213c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e140      	b.n	80023b0 <HAL_RCC_OscConfig+0x4ec>
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000
 8002134:	42420000 	.word	0x42420000
 8002138:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800213c:	4b9e      	ldr	r3, [pc, #632]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1e9      	bne.n	800211c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 80a6 	beq.w	80022a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002156:	2300      	movs	r3, #0
 8002158:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800215a:	4b97      	ldr	r3, [pc, #604]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10d      	bne.n	8002182 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002166:	4b94      	ldr	r3, [pc, #592]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	4a93      	ldr	r2, [pc, #588]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 800216c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002170:	61d3      	str	r3, [r2, #28]
 8002172:	4b91      	ldr	r3, [pc, #580]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800217e:	2301      	movs	r3, #1
 8002180:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002182:	4b8e      	ldr	r3, [pc, #568]	; (80023bc <HAL_RCC_OscConfig+0x4f8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218a:	2b00      	cmp	r3, #0
 800218c:	d118      	bne.n	80021c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800218e:	4b8b      	ldr	r3, [pc, #556]	; (80023bc <HAL_RCC_OscConfig+0x4f8>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a8a      	ldr	r2, [pc, #552]	; (80023bc <HAL_RCC_OscConfig+0x4f8>)
 8002194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002198:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800219a:	f7ff fbb9 	bl	8001910 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021a2:	f7ff fbb5 	bl	8001910 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b64      	cmp	r3, #100	; 0x64
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e0fd      	b.n	80023b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b4:	4b81      	ldr	r3, [pc, #516]	; (80023bc <HAL_RCC_OscConfig+0x4f8>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0f0      	beq.n	80021a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d106      	bne.n	80021d6 <HAL_RCC_OscConfig+0x312>
 80021c8:	4b7b      	ldr	r3, [pc, #492]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	4a7a      	ldr	r2, [pc, #488]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	6213      	str	r3, [r2, #32]
 80021d4:	e02d      	b.n	8002232 <HAL_RCC_OscConfig+0x36e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x334>
 80021de:	4b76      	ldr	r3, [pc, #472]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	4a75      	ldr	r2, [pc, #468]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 80021e4:	f023 0301 	bic.w	r3, r3, #1
 80021e8:	6213      	str	r3, [r2, #32]
 80021ea:	4b73      	ldr	r3, [pc, #460]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	4a72      	ldr	r2, [pc, #456]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 80021f0:	f023 0304 	bic.w	r3, r3, #4
 80021f4:	6213      	str	r3, [r2, #32]
 80021f6:	e01c      	b.n	8002232 <HAL_RCC_OscConfig+0x36e>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	2b05      	cmp	r3, #5
 80021fe:	d10c      	bne.n	800221a <HAL_RCC_OscConfig+0x356>
 8002200:	4b6d      	ldr	r3, [pc, #436]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	4a6c      	ldr	r2, [pc, #432]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 8002206:	f043 0304 	orr.w	r3, r3, #4
 800220a:	6213      	str	r3, [r2, #32]
 800220c:	4b6a      	ldr	r3, [pc, #424]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	4a69      	ldr	r2, [pc, #420]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 8002212:	f043 0301 	orr.w	r3, r3, #1
 8002216:	6213      	str	r3, [r2, #32]
 8002218:	e00b      	b.n	8002232 <HAL_RCC_OscConfig+0x36e>
 800221a:	4b67      	ldr	r3, [pc, #412]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	4a66      	ldr	r2, [pc, #408]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 8002220:	f023 0301 	bic.w	r3, r3, #1
 8002224:	6213      	str	r3, [r2, #32]
 8002226:	4b64      	ldr	r3, [pc, #400]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	4a63      	ldr	r2, [pc, #396]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 800222c:	f023 0304 	bic.w	r3, r3, #4
 8002230:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d015      	beq.n	8002266 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223a:	f7ff fb69 	bl	8001910 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002240:	e00a      	b.n	8002258 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002242:	f7ff fb65 	bl	8001910 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002250:	4293      	cmp	r3, r2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e0ab      	b.n	80023b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002258:	4b57      	ldr	r3, [pc, #348]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0ee      	beq.n	8002242 <HAL_RCC_OscConfig+0x37e>
 8002264:	e014      	b.n	8002290 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002266:	f7ff fb53 	bl	8001910 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800226c:	e00a      	b.n	8002284 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226e:	f7ff fb4f 	bl	8001910 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	f241 3288 	movw	r2, #5000	; 0x1388
 800227c:	4293      	cmp	r3, r2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e095      	b.n	80023b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002284:	4b4c      	ldr	r3, [pc, #304]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1ee      	bne.n	800226e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002290:	7dfb      	ldrb	r3, [r7, #23]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d105      	bne.n	80022a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002296:	4b48      	ldr	r3, [pc, #288]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	4a47      	ldr	r2, [pc, #284]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 800229c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 8081 	beq.w	80023ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ac:	4b42      	ldr	r3, [pc, #264]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 030c 	and.w	r3, r3, #12
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d061      	beq.n	800237c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d146      	bne.n	800234e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c0:	4b3f      	ldr	r3, [pc, #252]	; (80023c0 <HAL_RCC_OscConfig+0x4fc>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c6:	f7ff fb23 	bl	8001910 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ce:	f7ff fb1f 	bl	8001910 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e067      	b.n	80023b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e0:	4b35      	ldr	r3, [pc, #212]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1f0      	bne.n	80022ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f4:	d108      	bne.n	8002308 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022f6:	4b30      	ldr	r3, [pc, #192]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	492d      	ldr	r1, [pc, #180]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 8002304:	4313      	orrs	r3, r2
 8002306:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002308:	4b2b      	ldr	r3, [pc, #172]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a19      	ldr	r1, [r3, #32]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	430b      	orrs	r3, r1
 800231a:	4927      	ldr	r1, [pc, #156]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 800231c:	4313      	orrs	r3, r2
 800231e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002320:	4b27      	ldr	r3, [pc, #156]	; (80023c0 <HAL_RCC_OscConfig+0x4fc>)
 8002322:	2201      	movs	r2, #1
 8002324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002326:	f7ff faf3 	bl	8001910 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232e:	f7ff faef 	bl	8001910 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e037      	b.n	80023b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002340:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0f0      	beq.n	800232e <HAL_RCC_OscConfig+0x46a>
 800234c:	e02f      	b.n	80023ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234e:	4b1c      	ldr	r3, [pc, #112]	; (80023c0 <HAL_RCC_OscConfig+0x4fc>)
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002354:	f7ff fadc 	bl	8001910 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235c:	f7ff fad8 	bl	8001910 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e020      	b.n	80023b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800236e:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0x498>
 800237a:	e018      	b.n	80023ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d101      	bne.n	8002388 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e013      	b.n	80023b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <HAL_RCC_OscConfig+0x4f4>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	429a      	cmp	r2, r3
 800239a:	d106      	bne.n	80023aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d001      	beq.n	80023ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40021000 	.word	0x40021000
 80023bc:	40007000 	.word	0x40007000
 80023c0:	42420060 	.word	0x42420060

080023c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0d0      	b.n	800257a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023d8:	4b6a      	ldr	r3, [pc, #424]	; (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d910      	bls.n	8002408 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e6:	4b67      	ldr	r3, [pc, #412]	; (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f023 0207 	bic.w	r2, r3, #7
 80023ee:	4965      	ldr	r1, [pc, #404]	; (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f6:	4b63      	ldr	r3, [pc, #396]	; (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d001      	beq.n	8002408 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0b8      	b.n	800257a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d020      	beq.n	8002456 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	d005      	beq.n	800242c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002420:	4b59      	ldr	r3, [pc, #356]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	4a58      	ldr	r2, [pc, #352]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002426:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800242a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002438:	4b53      	ldr	r3, [pc, #332]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	4a52      	ldr	r2, [pc, #328]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002442:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002444:	4b50      	ldr	r3, [pc, #320]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	494d      	ldr	r1, [pc, #308]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	4313      	orrs	r3, r2
 8002454:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d040      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d107      	bne.n	800247a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246a:	4b47      	ldr	r3, [pc, #284]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d115      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e07f      	b.n	800257a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d107      	bne.n	8002492 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002482:	4b41      	ldr	r3, [pc, #260]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d109      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e073      	b.n	800257a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002492:	4b3d      	ldr	r3, [pc, #244]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e06b      	b.n	800257a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024a2:	4b39      	ldr	r3, [pc, #228]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f023 0203 	bic.w	r2, r3, #3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	4936      	ldr	r1, [pc, #216]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024b4:	f7ff fa2c 	bl	8001910 <HAL_GetTick>
 80024b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ba:	e00a      	b.n	80024d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024bc:	f7ff fa28 	bl	8001910 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e053      	b.n	800257a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d2:	4b2d      	ldr	r3, [pc, #180]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 020c 	and.w	r2, r3, #12
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d1eb      	bne.n	80024bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024e4:	4b27      	ldr	r3, [pc, #156]	; (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d210      	bcs.n	8002514 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f2:	4b24      	ldr	r3, [pc, #144]	; (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 0207 	bic.w	r2, r3, #7
 80024fa:	4922      	ldr	r1, [pc, #136]	; (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	4313      	orrs	r3, r2
 8002500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002502:	4b20      	ldr	r3, [pc, #128]	; (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	429a      	cmp	r2, r3
 800250e:	d001      	beq.n	8002514 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e032      	b.n	800257a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	d008      	beq.n	8002532 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002520:	4b19      	ldr	r3, [pc, #100]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	4916      	ldr	r1, [pc, #88]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	4313      	orrs	r3, r2
 8002530:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b00      	cmp	r3, #0
 800253c:	d009      	beq.n	8002552 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800253e:	4b12      	ldr	r3, [pc, #72]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	490e      	ldr	r1, [pc, #56]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	4313      	orrs	r3, r2
 8002550:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002552:	f000 f821 	bl	8002598 <HAL_RCC_GetSysClockFreq>
 8002556:	4602      	mov	r2, r0
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	490a      	ldr	r1, [pc, #40]	; (800258c <HAL_RCC_ClockConfig+0x1c8>)
 8002564:	5ccb      	ldrb	r3, [r1, r3]
 8002566:	fa22 f303 	lsr.w	r3, r2, r3
 800256a:	4a09      	ldr	r2, [pc, #36]	; (8002590 <HAL_RCC_ClockConfig+0x1cc>)
 800256c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800256e:	4b09      	ldr	r3, [pc, #36]	; (8002594 <HAL_RCC_ClockConfig+0x1d0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff f98a 	bl	800188c <HAL_InitTick>

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40022000 	.word	0x40022000
 8002588:	40021000 	.word	0x40021000
 800258c:	08002ea4 	.word	0x08002ea4
 8002590:	20000088 	.word	0x20000088
 8002594:	2000008c 	.word	0x2000008c

08002598 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002598:	b480      	push	{r7}
 800259a:	b087      	sub	sp, #28
 800259c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	2300      	movs	r3, #0
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	2300      	movs	r3, #0
 80025ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025b2:	4b1e      	ldr	r3, [pc, #120]	; (800262c <HAL_RCC_GetSysClockFreq+0x94>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d002      	beq.n	80025c8 <HAL_RCC_GetSysClockFreq+0x30>
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d003      	beq.n	80025ce <HAL_RCC_GetSysClockFreq+0x36>
 80025c6:	e027      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025c8:	4b19      	ldr	r3, [pc, #100]	; (8002630 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ca:	613b      	str	r3, [r7, #16]
      break;
 80025cc:	e027      	b.n	800261e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	0c9b      	lsrs	r3, r3, #18
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	4a17      	ldr	r2, [pc, #92]	; (8002634 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025d8:	5cd3      	ldrb	r3, [r2, r3]
 80025da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d010      	beq.n	8002608 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025e6:	4b11      	ldr	r3, [pc, #68]	; (800262c <HAL_RCC_GetSysClockFreq+0x94>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	0c5b      	lsrs	r3, r3, #17
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	4a11      	ldr	r2, [pc, #68]	; (8002638 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025f2:	5cd3      	ldrb	r3, [r2, r3]
 80025f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a0d      	ldr	r2, [pc, #52]	; (8002630 <HAL_RCC_GetSysClockFreq+0x98>)
 80025fa:	fb02 f203 	mul.w	r2, r2, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	fbb2 f3f3 	udiv	r3, r2, r3
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	e004      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a0c      	ldr	r2, [pc, #48]	; (800263c <HAL_RCC_GetSysClockFreq+0xa4>)
 800260c:	fb02 f303 	mul.w	r3, r2, r3
 8002610:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	613b      	str	r3, [r7, #16]
      break;
 8002616:	e002      	b.n	800261e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <HAL_RCC_GetSysClockFreq+0x98>)
 800261a:	613b      	str	r3, [r7, #16]
      break;
 800261c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800261e:	693b      	ldr	r3, [r7, #16]
}
 8002620:	4618      	mov	r0, r3
 8002622:	371c      	adds	r7, #28
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000
 8002630:	007a1200 	.word	0x007a1200
 8002634:	08002eb4 	.word	0x08002eb4
 8002638:	08002ec4 	.word	0x08002ec4
 800263c:	003d0900 	.word	0x003d0900

08002640 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002648:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <RCC_Delay+0x34>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a0a      	ldr	r2, [pc, #40]	; (8002678 <RCC_Delay+0x38>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	0a5b      	lsrs	r3, r3, #9
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	fb02 f303 	mul.w	r3, r2, r3
 800265a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800265c:	bf00      	nop
  }
  while (Delay --);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1e5a      	subs	r2, r3, #1
 8002662:	60fa      	str	r2, [r7, #12]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1f9      	bne.n	800265c <RCC_Delay+0x1c>
}
 8002668:	bf00      	nop
 800266a:	bf00      	nop
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr
 8002674:	20000088 	.word	0x20000088
 8002678:	10624dd3 	.word	0x10624dd3

0800267c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e041      	b.n	8002712 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d106      	bne.n	80026a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff f850 	bl	8001748 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2202      	movs	r2, #2
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3304      	adds	r3, #4
 80026b8:	4619      	mov	r1, r3
 80026ba:	4610      	mov	r0, r2
 80026bc:	f000 fa56 	bl	8002b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b01      	cmp	r3, #1
 800272e:	d001      	beq.n	8002734 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e035      	b.n	80027a0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a16      	ldr	r2, [pc, #88]	; (80027ac <HAL_TIM_Base_Start_IT+0x90>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d009      	beq.n	800276a <HAL_TIM_Base_Start_IT+0x4e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800275e:	d004      	beq.n	800276a <HAL_TIM_Base_Start_IT+0x4e>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a12      	ldr	r2, [pc, #72]	; (80027b0 <HAL_TIM_Base_Start_IT+0x94>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d111      	bne.n	800278e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2b06      	cmp	r3, #6
 800277a:	d010      	beq.n	800279e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800278c:	e007      	b.n	800279e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f042 0201 	orr.w	r2, r2, #1
 800279c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc80      	pop	{r7}
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40012c00 	.word	0x40012c00
 80027b0:	40000400 	.word	0x40000400

080027b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d020      	beq.n	8002818 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d01b      	beq.n	8002818 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0202 	mvn.w	r2, #2
 80027e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f998 	bl	8002b34 <HAL_TIM_IC_CaptureCallback>
 8002804:	e005      	b.n	8002812 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f98b 	bl	8002b22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f99a 	bl	8002b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b00      	cmp	r3, #0
 8002820:	d020      	beq.n	8002864 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d01b      	beq.n	8002864 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0204 	mvn.w	r2, #4
 8002834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2202      	movs	r2, #2
 800283a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f972 	bl	8002b34 <HAL_TIM_IC_CaptureCallback>
 8002850:	e005      	b.n	800285e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f965 	bl	8002b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f974 	bl	8002b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d020      	beq.n	80028b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	2b00      	cmp	r3, #0
 8002876:	d01b      	beq.n	80028b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f06f 0208 	mvn.w	r2, #8
 8002880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2204      	movs	r2, #4
 8002886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f94c 	bl	8002b34 <HAL_TIM_IC_CaptureCallback>
 800289c:	e005      	b.n	80028aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f93f 	bl	8002b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f94e 	bl	8002b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f003 0310 	and.w	r3, r3, #16
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d020      	beq.n	80028fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f003 0310 	and.w	r3, r3, #16
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d01b      	beq.n	80028fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f06f 0210 	mvn.w	r2, #16
 80028cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2208      	movs	r2, #8
 80028d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f926 	bl	8002b34 <HAL_TIM_IC_CaptureCallback>
 80028e8:	e005      	b.n	80028f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f919 	bl	8002b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f928 	bl	8002b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00c      	beq.n	8002920 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d007      	beq.n	8002920 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f06f 0201 	mvn.w	r2, #1
 8002918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fe fd4a 	bl	80013b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00c      	beq.n	8002944 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002930:	2b00      	cmp	r3, #0
 8002932:	d007      	beq.n	8002944 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800293c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fa6f 	bl	8002e22 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00c      	beq.n	8002968 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002954:	2b00      	cmp	r3, #0
 8002956:	d007      	beq.n	8002968 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f8f8 	bl	8002b58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00c      	beq.n	800298c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f003 0320 	and.w	r3, r3, #32
 8002978:	2b00      	cmp	r3, #0
 800297a:	d007      	beq.n	800298c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f06f 0220 	mvn.w	r2, #32
 8002984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fa42 	bl	8002e10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800298c:	bf00      	nop
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_TIM_ConfigClockSource+0x1c>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e0b4      	b.n	8002b1a <HAL_TIM_ConfigClockSource+0x186>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029e8:	d03e      	beq.n	8002a68 <HAL_TIM_ConfigClockSource+0xd4>
 80029ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ee:	f200 8087 	bhi.w	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 80029f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029f6:	f000 8086 	beq.w	8002b06 <HAL_TIM_ConfigClockSource+0x172>
 80029fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029fe:	d87f      	bhi.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 8002a00:	2b70      	cmp	r3, #112	; 0x70
 8002a02:	d01a      	beq.n	8002a3a <HAL_TIM_ConfigClockSource+0xa6>
 8002a04:	2b70      	cmp	r3, #112	; 0x70
 8002a06:	d87b      	bhi.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 8002a08:	2b60      	cmp	r3, #96	; 0x60
 8002a0a:	d050      	beq.n	8002aae <HAL_TIM_ConfigClockSource+0x11a>
 8002a0c:	2b60      	cmp	r3, #96	; 0x60
 8002a0e:	d877      	bhi.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 8002a10:	2b50      	cmp	r3, #80	; 0x50
 8002a12:	d03c      	beq.n	8002a8e <HAL_TIM_ConfigClockSource+0xfa>
 8002a14:	2b50      	cmp	r3, #80	; 0x50
 8002a16:	d873      	bhi.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 8002a18:	2b40      	cmp	r3, #64	; 0x40
 8002a1a:	d058      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0x13a>
 8002a1c:	2b40      	cmp	r3, #64	; 0x40
 8002a1e:	d86f      	bhi.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 8002a20:	2b30      	cmp	r3, #48	; 0x30
 8002a22:	d064      	beq.n	8002aee <HAL_TIM_ConfigClockSource+0x15a>
 8002a24:	2b30      	cmp	r3, #48	; 0x30
 8002a26:	d86b      	bhi.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 8002a28:	2b20      	cmp	r3, #32
 8002a2a:	d060      	beq.n	8002aee <HAL_TIM_ConfigClockSource+0x15a>
 8002a2c:	2b20      	cmp	r3, #32
 8002a2e:	d867      	bhi.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d05c      	beq.n	8002aee <HAL_TIM_ConfigClockSource+0x15a>
 8002a34:	2b10      	cmp	r3, #16
 8002a36:	d05a      	beq.n	8002aee <HAL_TIM_ConfigClockSource+0x15a>
 8002a38:	e062      	b.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	6899      	ldr	r1, [r3, #8]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f000 f96a 	bl	8002d22 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	609a      	str	r2, [r3, #8]
      break;
 8002a66:	e04f      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6818      	ldr	r0, [r3, #0]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	6899      	ldr	r1, [r3, #8]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f000 f953 	bl	8002d22 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a8a:	609a      	str	r2, [r3, #8]
      break;
 8002a8c:	e03c      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	6859      	ldr	r1, [r3, #4]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	f000 f8ca 	bl	8002c34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2150      	movs	r1, #80	; 0x50
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 f921 	bl	8002cee <TIM_ITRx_SetConfig>
      break;
 8002aac:	e02c      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6818      	ldr	r0, [r3, #0]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	6859      	ldr	r1, [r3, #4]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	461a      	mov	r2, r3
 8002abc:	f000 f8e8 	bl	8002c90 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2160      	movs	r1, #96	; 0x60
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 f911 	bl	8002cee <TIM_ITRx_SetConfig>
      break;
 8002acc:	e01c      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6818      	ldr	r0, [r3, #0]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	6859      	ldr	r1, [r3, #4]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	461a      	mov	r2, r3
 8002adc:	f000 f8aa 	bl	8002c34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2140      	movs	r1, #64	; 0x40
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 f901 	bl	8002cee <TIM_ITRx_SetConfig>
      break;
 8002aec:	e00c      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4619      	mov	r1, r3
 8002af8:	4610      	mov	r0, r2
 8002afa:	f000 f8f8 	bl	8002cee <TIM_ITRx_SetConfig>
      break;
 8002afe:	e003      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
      break;
 8002b04:	e000      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr
	...

08002b6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a2b      	ldr	r2, [pc, #172]	; (8002c2c <TIM_Base_SetConfig+0xc0>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d007      	beq.n	8002b94 <TIM_Base_SetConfig+0x28>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b8a:	d003      	beq.n	8002b94 <TIM_Base_SetConfig+0x28>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a28      	ldr	r2, [pc, #160]	; (8002c30 <TIM_Base_SetConfig+0xc4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d108      	bne.n	8002ba6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a20      	ldr	r2, [pc, #128]	; (8002c2c <TIM_Base_SetConfig+0xc0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d007      	beq.n	8002bbe <TIM_Base_SetConfig+0x52>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb4:	d003      	beq.n	8002bbe <TIM_Base_SetConfig+0x52>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a1d      	ldr	r2, [pc, #116]	; (8002c30 <TIM_Base_SetConfig+0xc4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d108      	bne.n	8002bd0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a0d      	ldr	r2, [pc, #52]	; (8002c2c <TIM_Base_SetConfig+0xc0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d103      	bne.n	8002c04 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d005      	beq.n	8002c22 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f023 0201 	bic.w	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	611a      	str	r2, [r3, #16]
  }
}
 8002c22:	bf00      	nop
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr
 8002c2c:	40012c00 	.word	0x40012c00
 8002c30:	40000400 	.word	0x40000400

08002c34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b087      	sub	sp, #28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	f023 0201 	bic.w	r2, r3, #1
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f023 030a 	bic.w	r3, r3, #10
 8002c70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	621a      	str	r2, [r3, #32]
}
 8002c86:	bf00      	nop
 8002c88:	371c      	adds	r7, #28
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr

08002c90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b087      	sub	sp, #28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	f023 0210 	bic.w	r2, r3, #16
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	031b      	lsls	r3, r3, #12
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ccc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	621a      	str	r2, [r3, #32]
}
 8002ce4:	bf00      	nop
 8002ce6:	371c      	adds	r7, #28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr

08002cee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b085      	sub	sp, #20
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f043 0307 	orr.w	r3, r3, #7
 8002d10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	609a      	str	r2, [r3, #8]
}
 8002d18:	bf00      	nop
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b087      	sub	sp, #28
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d3c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	021a      	lsls	r2, r3, #8
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	431a      	orrs	r2, r3
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	609a      	str	r2, [r3, #8]
}
 8002d56:	bf00      	nop
 8002d58:	371c      	adds	r7, #28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e041      	b.n	8002dfc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a14      	ldr	r2, [pc, #80]	; (8002e08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d009      	beq.n	8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc4:	d004      	beq.n	8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a10      	ldr	r2, [pc, #64]	; (8002e0c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d10c      	bne.n	8002dea <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40012c00 	.word	0x40012c00
 8002e0c:	40000400 	.word	0x40000400

08002e10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr

08002e22 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <__libc_init_array>:
 8002e34:	b570      	push	{r4, r5, r6, lr}
 8002e36:	2600      	movs	r6, #0
 8002e38:	4d0c      	ldr	r5, [pc, #48]	; (8002e6c <__libc_init_array+0x38>)
 8002e3a:	4c0d      	ldr	r4, [pc, #52]	; (8002e70 <__libc_init_array+0x3c>)
 8002e3c:	1b64      	subs	r4, r4, r5
 8002e3e:	10a4      	asrs	r4, r4, #2
 8002e40:	42a6      	cmp	r6, r4
 8002e42:	d109      	bne.n	8002e58 <__libc_init_array+0x24>
 8002e44:	f000 f822 	bl	8002e8c <_init>
 8002e48:	2600      	movs	r6, #0
 8002e4a:	4d0a      	ldr	r5, [pc, #40]	; (8002e74 <__libc_init_array+0x40>)
 8002e4c:	4c0a      	ldr	r4, [pc, #40]	; (8002e78 <__libc_init_array+0x44>)
 8002e4e:	1b64      	subs	r4, r4, r5
 8002e50:	10a4      	asrs	r4, r4, #2
 8002e52:	42a6      	cmp	r6, r4
 8002e54:	d105      	bne.n	8002e62 <__libc_init_array+0x2e>
 8002e56:	bd70      	pop	{r4, r5, r6, pc}
 8002e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e5c:	4798      	blx	r3
 8002e5e:	3601      	adds	r6, #1
 8002e60:	e7ee      	b.n	8002e40 <__libc_init_array+0xc>
 8002e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e66:	4798      	blx	r3
 8002e68:	3601      	adds	r6, #1
 8002e6a:	e7f2      	b.n	8002e52 <__libc_init_array+0x1e>
 8002e6c:	08002ec8 	.word	0x08002ec8
 8002e70:	08002ec8 	.word	0x08002ec8
 8002e74:	08002ec8 	.word	0x08002ec8
 8002e78:	08002ecc 	.word	0x08002ecc

08002e7c <memset>:
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	4402      	add	r2, r0
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d100      	bne.n	8002e86 <memset+0xa>
 8002e84:	4770      	bx	lr
 8002e86:	f803 1b01 	strb.w	r1, [r3], #1
 8002e8a:	e7f9      	b.n	8002e80 <memset+0x4>

08002e8c <_init>:
 8002e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8e:	bf00      	nop
 8002e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e92:	bc08      	pop	{r3}
 8002e94:	469e      	mov	lr, r3
 8002e96:	4770      	bx	lr

08002e98 <_fini>:
 8002e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9a:	bf00      	nop
 8002e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e9e:	bc08      	pop	{r3}
 8002ea0:	469e      	mov	lr, r3
 8002ea2:	4770      	bx	lr
